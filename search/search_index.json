{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> <li><code>mkdocs gh-deploy</code> - Deploy to Github Pages</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"about/","title":"Youtube-dl Firefox Addon","text":"Coucou toi  <p>clique ici si tu peux </p> Check juste au dessus Diane <p>Et un tit chat hop  - winter</p> <p>Firefox extension to download videos/audio from Youtube and others video websites using youtube-dl</p> <p></p>"},{"location":"about/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Description</li> <li>Prerequisites</li> <li>Installation</li> <li>How to use this addon</li> <li>Command line version</li> <li>Contributing</li> <li>Troubleshooting</li> <li>License</li> </ul>"},{"location":"about/#description","title":"Description","text":"<p>This is a firefox addon helping you downloads youtube videos or audio using youtube-dl. Simply use the addon while browsing youtube to download the audio or video.</p> <p>You can configure youtube-dl to download only audio, or convert into any desired format (mp3,wav,...) using FFMPEG, or download full video in any available quality. You can even download full Youtube playlists !</p> <p>The addon only display most commun formats : m4a (Native audio format for YT), mp3 (standard audio format) and mp4 (native video format for YT)</p> <p>NOTE</p> <p>It works with almost all markdown flavours (the below blank line matters).</p>"},{"location":"about/#prerequisites","title":"Prerequisites","text":"<ol> <li>Needs Mozilla Firefox installed.</li> <li>Needs Python installed. Don't forget to check \"ADD Python to Path\" and to \"Disable PATH length limit\"</li> <li>This has only been tested on Windows. Mac &amp; Linux users might have to make some changes</li> </ol>"},{"location":"about/#installation","title":"Installation","text":"<ol> <li>Clone/Download this repository</li> <li>Run the setup_win.bat file as ADMIN to install youtube-dl and necessary dependancies </li> <li>Install the add on from Firefox Addons Website.</li> <li>Restart firefox and it should work </li> </ol>"},{"location":"about/#how-to-use-this-addon","title":"How to use this addon","text":"<ol> <li>Go to any youtube page</li> <li>Press the addon's logo in the toolbar, then select the format you want (m4a, mp3, mp4)</li> <li>The video/audio will be downloaded in the background</li> <li>After the download is finished, you will get a notification saying the download has finished.  Note: The default download location is the \"Download\" folder. If you want to change that, check youtube-dl's configuration</li> </ol>"},{"location":"about/#command-line-version","title":"Command line version","text":"<p>If you want to use youtube-dl from command line you need to add FFMPEG to system environnement variables.</p> <ol> <li>Go to \"control Panel\" &gt; \"System and Security\" &gt; \"System\"</li> <li>Go to \"Advanced System Settings\"</li> <li>Go to \"Environement Variables\"</li> <li>Now find \"PATH\" in the \"System Variables\" section and click \"edit\"</li> <li>Click \"New\" and write \"C:\\youtube_dl\\FFMPEG\\bin\"</li> <li>Re-open your command prompt to commit changes</li> </ol>"},{"location":"about/#contributing","title":"Contributing","text":"<ol> <li>Fork it!</li> <li>Create your feature branch: <code>git checkout -b my-new-feature</code></li> <li>Commit your changes: <code>git commit -am 'Add some feature'</code></li> <li>Push to the branch: <code>git push origin my-new-feature</code></li> <li>Submit a pull request :D</li> </ol>"},{"location":"about/#troubleshooting","title":"Troubleshooting","text":"<p>If you experience youtube-dl errors message, it is highly possible that Youtube changed something making the program not working anymore. However, a fix is usually found within 24h so you just have to upgrade your youtube-dl version by using this command in a windows shell : <pre><code>pip install --upgrade youtube-dl\n</code></pre></p>"},{"location":"about/#license","title":"License","text":"<p>This program is Youtube Dl Firefox Addon.</p> <p>Copyright (C) 2020  Thibaut Decombe. </p> <p>Youtube Dl Firefox Addon is available under the MIT license. See the LICENSE file for more info.</p>"},{"location":"django/forms/","title":"Forms","text":""},{"location":"django/forms/#get-post","title":"GET &amp; POST","text":"<p>GET and POST are the only HTTP methods to use when dealing with forms.</p> <p>Django\u2019s login form is returned using the POST method, in which the browser bundles up the form data, encodes it for transmission, sends it to the server, and then receives back its response.</p> <p>GET, by contrast, bundles the submitted data into a string, and uses this to compose a URL. The URL contains the address where the data must be sent, as well as the data keys and values. You can see this in action if you do a search in the Django documentation, which will produce a URL of the form https://docs.djangoproject.com/search/?q=forms&amp;release=1.</p> <p>GET and POST are typically used for different purposes.</p> <p>Any request that could be used to change the state of the system - for example, a request that makes changes in the database - should use POST. GET should be used only for requests that do not affect the state of the system.</p> <p>On the other hand, GET is suitable for things like a web search form, because the URLs that represent a GET request can easily be bookmarked, shared, or resubmitted.</p> Security matters <p>GET would also be unsuitable for a password form, because the password would appear in the URL, and thus, also in browser history and server logs, all in plain text. Neither would it be suitable for large quantities of data, or for binary data, such as an image. A Web application that uses GET requests for admin forms is a security risk: it can be easy for an attacker to mimic a form\u2019s request to gain access to sensitive parts of the system. POST, coupled with other protections like Django\u2019s CSRF protection offers more control over access.</p>"},{"location":"django/forms/#django-form-class","title":"Django form class","text":"<p>We define a custom form using a class. max_length,... are used for client &amp; server side validation</p>"},{"location":"django/forms/#basic-form","title":"Basic form","text":"<pre><code>from django import forms\nclass ContactForm(forms.Form):\nsubject = forms.CharField(max_length=100)\nmessage = forms.CharField(widget=forms.Textarea)\nsender = forms.EmailField()\ncc_myself = forms.BooleanField(required=False)\n</code></pre>"},{"location":"django/forms/#modelform","title":"ModelForm","text":"<p>If your form is going to be used to directly add or edit a Django model, a ModelForm can save you a great deal of time, effort, and code, because it will build a form, along with the appropriate fields and their attributes, from a Model class.</p> <pre><code>from django.forms import ModelForm\nfrom myapp.models import Article\n# Create the form class.\nclass ArticleForm(ModelForm):\nclass Meta:\nmodel = Article\nfields = ['pub_date', 'headline', 'content', 'reporter']\n# Creating a form to add an article.\nform = ArticleForm()\n# Creating a form to change an existing article.\narticle = Article.objects.get(pk=1)\nform = ArticleForm(instance=article)\n</code></pre>"},{"location":"django/forms/#django-form-view","title":"Django form view","text":"<p>We process submitted data using the is_valid() method that does server side validation.</p> <pre><code>from django.http import HttpResponseRedirect\nfrom django.shortcuts import render\nfrom .forms import ContactForm\ndef get_name(request):\n# if this is a POST request we need to process the form data\nif request.method == 'POST':\n# create a form instance and populate it with data from the request:\nform = NameForm(request.POST)\n# check whether it's valid:\nif form.is_valid():\n# process the data in form.cleaned_data as required\n# ...\n# redirect to a new URL:\nreturn HttpResponseRedirect('/thanks/')\n# if a GET (or any other method) we'll create a blank form\nelse:\nform = NameForm()\nreturn render(request, 'name.html', {'form': form})\n</code></pre>"},{"location":"django/forms/#django-form-template","title":"Django form template","text":"<pre><code>&lt;form action=\"/your-name/\" method=\"post\"&gt;\n{% csrf_token %}\n{{ form }}\n&lt;input type=\"submit\" value=\"Submit\"&gt;\n&lt;/form&gt;\n</code></pre> <p>There are other output options though for the <code>&lt;label&gt;/&lt;input&gt;</code> pairs:</p> <ul> <li><code>{{ form.as_table }}</code> will render them as table cells wrapped in <code>&lt;tr&gt;</code> tags</li> <li><code>{{ form.as_p }}</code> will render them wrapped in <code>&lt;p&gt;</code> tags</li> <li><code>{{ form.as_ul }}</code> will render them wrapped in <code>&lt;li&gt;</code> tags</li> </ul> <p>Note that you\u2019ll have to provide the surrounding <code>&lt;table&gt;</code> or <code>&lt;ul&gt;</code> elements yourself.</p>"},{"location":"django/forms/#form-fields","title":"Form fields","text":"<p>Most usefull form fields :</p> <ul> <li><code>required=true</code> : is the form field required of not </li> <li><code>widget=defaultWidget</code> : let you specifie a widget call to use</li> <li> <p><code>validators</code></p> </li> <li> <p><code>label</code> : Label displayed next to the field input. Default generated from field name</p> </li> <li><code>initial</code> : Put an initial value in the form</li> <li><code>help_text</code>: Add descriptive text for you field</li> <li><code>error_message</code>: Override default error message using a dict {error_type, error_msg}<code>error_message = {'required': 'Please enter your name'}</code></li> </ul>"},{"location":"django/getting_started/","title":"Starting a project","text":""},{"location":"django/getting_started/#commands","title":"Commands","text":"<ul> <li><code>django-admin startproject PROJECT_NAME</code> - Create a new project.</li> <li><code>python manage.py startapp APP_NAME</code> - Create a new app.</li> <li><code>python manage.py runserver</code> - Start the live-reloading development server.</li> <li><code>python manage.py shell</code> - Enter Django shell.</li> <li><code>python manage.py createsuperuser</code> - Create an administrative user.</li> <li><code>python manage.py makemigrations</code> - Create migration file.</li> <li><code>python manage.py makemigrations --merge</code> - Merge conflict migrations.</li> <li><code>python manage.py migrate</code> - Apply these migrations.</li> <li><code>python manage.py collectstatic</code> - Collect static file.</li> </ul> Warning <p>Don't forget to : 1. Add APP_NAME to INSTALLED_APP in settings.py 2. Create a urls.py file in APP_NAME 3. Add 'path('APP_NAME/', include(\"APP_NAME.urls\"))' to main urls.py  </p>"},{"location":"django/models/","title":"Models &amp; DB","text":""},{"location":"django/models/#models","title":"Models","text":""},{"location":"django/models/#common-field-types","title":"Common field types","text":"<ul> <li>CharField is used to define short-to-mid sized fixed-length strings. You must specify the max_length of the data to be stored.</li> <li>TextField is used for large arbitrary-length strings. You may specify a max_length for the field, but this is used only when the field is displayed in forms (it is not enforced at the database level).</li> <li>IntegerField is a field for storing integer (whole number) values, and for validating entered values as integers in forms.</li> <li>DateField and DateTimeField are used for storing/representing dates and date/time information (as Python datetime.date in and datetime.datetime objects, respectively). These fields can additionally declare the (mutually exclusive) parameters auto_now=True (to set the field to the current date every time the model is saved), auto_now_add (to only set the date when the model is first created) , and default (to set a default date that can be overridden by the user).</li> <li>EmailField is used to store and validate email addresses.</li> <li>FileField and ImageField are used to upload files and images respectively (the ImageField adds additional validation that the uploaded file is an image). These have parameters to define how and where the uploaded files are stored.</li> <li>AutoField is a special type of IntegerField that automatically increments. A primary key of this type is automatically added to your model if you don\u2019t explicitly specify one.</li> <li>ForeignKey is used to specify a one-to-many relationship to another database model (e.g. a car has one manufacturer, but a manufacturer can make many cars). The \"one\" side of the relationship is the model that contains the \"key\" (models containing a \"foreign key\" referring to that \"key\", are on the \"many\" side of such a relationship).</li> <li>ManyToManyField is used to specify a many-to-many relationship (e.g. a book can have several genres, and each genre can contain several books). In our library app we will use these very similarly to ForeignKeys, but they can be used in more complicated ways to describe the relationships between groups. These have the parameter on_delete to define what happens when the associated record is deleted (e.g. a value of models.SET_NULL would set the value to NULL).</li> </ul> Tip <p>Full list of field types</p>"},{"location":"django/models/#common-field-arguments","title":"Common field arguments","text":"<ul> <li>help_text : Provides a text label for HTML forms (e.g. in the admin site), as described above.</li> <li>verbose_name: A human-readable name for the field used in field labels. If not specified, Django will infer the default verbose name from the field name.</li> <li>default: The default value for the field. This can be a value or a callable object, in which case the object will be called every time a new record is created.</li> <li>null: If True, Django will store blank values as NULL in the database for fields where this is appropriate (a CharField will instead store an empty string). The default is False.</li> <li>blank: If True, the field is allowed to be blank in your forms. The default is False, which means that Django's form validation will force you to enter a value. This is often used with null=True , because if you're going to allow blank values, you also want the database to be able to represent them appropriately.</li> <li>choices: A group of choices for this field. If this is provided, the default corresponding form widget will be a select box with these choices instead of the standard text field.</li> <li>primary_key: If True, sets the current field as the primary key for the model (A primary key is a special database column designated to uniquely identify all the different table records). If no field is specified as the primary key then Django will automatically add a field for this purpose.</li> </ul> Reference <p>Full list of field options</p>"},{"location":"django/models/#metadata","title":"Metadata","text":"<p>You can declare model-level metadata for your Model by declaring class Meta, as shown.</p> <pre><code>class Meta:\nordering = ['title', '-pubdate']\nverbose_name = 'BetterName'\nverbose_name_plural = 'Better Names'\n</code></pre> Info <p>ordering will change query default order verbose_name will change display in admin panel</p>"},{"location":"django/models/#abstract-base-class","title":"Abstract base class","text":"<p>Abstract base classes are useful when you want to put some common information into a number of other models. You write your base class and put <code>abstract=True</code> in the Meta class. This model will then not be used to create any database table. Instead, when it is used as a base class for other models, its fields will be added to those of the child class.</p> <pre><code>from django.db import models\nclass CommonInfo(models.Model):\nname = models.CharField(max_length=100)\nage = models.PositiveIntegerField()\nclass Meta:\nabstract = True\nclass Student(CommonInfo):\nhome_group = models.CharField(max_length=5)\n</code></pre>"},{"location":"django/models/#proxy-models","title":"Proxy models","text":"<p>You can create, delete and update instances of the proxy model and all the data will be saved as if you were using the original (non-proxied) model. The difference is that you can change things like the default model ordering or the default manager in the proxy, without having to alter the original.  </p> <p>You could also use a proxy model to define a different default ordering on a model. You might not always want to order the Person model, but regularly order by the last_name attribute when you use the proxy:</p> <pre><code>class OrderedPerson(Person):\nclass Meta:\nordering = [\"last_name\"]\nproxy = True\n</code></pre> Reference <p>Full list of metadata options</p>"},{"location":"django/models/#methods","title":"Methods","text":"<p>Minimally, in every model you should define the standard Python class method __str__() to return a human-readable string for each object</p> <pre><code>def __str__(self):\nreturn self.field_name\n</code></pre> <p>Another common method to include in Django models is get_absolute_url(), which returns a URL for displaying individual model records on the website (if you define this method then Django will automatically add a \"View on Site\" button to the model's record editing screens in the Admin site). A typical pattern for get_absolute_url() is shown below.</p> <pre><code>def get_absolute_url(self):\n\"\"\"Returns the url to access a particular instance of the model.\"\"\"\nreturn reverse('model-detail-view', args=[str(self.id)])\n</code></pre> Note <p>Assuming you will use URLs like /myapplication/mymodelname/2 to display individual records for your model (where \"2\" is the id for a particular record), you will need to create a URL mapper to pass the response and id to a \"model detail view\" (which will do the work required to display the record).  The reverse() function above is able to \"reverse\" your url mapper (in the above case named 'model-detail-view') in order to create a URL of the right format.    </p>"},{"location":"django/models/#queries","title":"Queries","text":"<p>Throughout this guide (and in the reference), we\u2019ll refer to the following models, which comprise a Weblog application:</p> <pre><code>from django.db import models\nclass Blog(models.Model):\nname = models.CharField(max_length=100)\ntagline = models.TextField()\ndef __str__(self):\nreturn self.name\nclass Author(models.Model):\nname = models.CharField(max_length=200)\nemail = models.EmailField()\ndef __str__(self):\nreturn self.name\nclass Entry(models.Model):\nblog = models.ForeignKey(Blog, on_delete=models.CASCADE)\nheadline = models.CharField(max_length=255)\nbody_text = models.TextField()\npub_date = models.DateField()\nmod_date = models.DateField()\nauthors = models.ManyToManyField(Author)\nnumber_of_comments = models.IntegerField()\nnumber_of_pingbacks = models.IntegerField()\nrating = models.IntegerField()\ndef __str__(self):\nreturn self.headline\n</code></pre>"},{"location":"django/models/#createupdatedelete","title":"Create/Update/Delete","text":"Create <pre><code># Method 1\nb = Blog(name='Beatles Blog', tagline='latest Beatles news')\nb.save()\n# Method 2\nb = Blog.objects.create(name='Beatles Blog', tagline='latest Beatles news')\n</code></pre> Info <p>Create a new blog object The save method has no return value</p> Update <pre><code># Method 1\nb5.name = 'New name'\nb5.save()\n# Method 2\nEntry.objects.filter(pub_date__year=2007).update(headline='Everything is the same')\n</code></pre> Info <ol> <li>The update() method is applied instantly and returns the number of rows matched by the query  </li> <li>Calls to update can also use F expressions to update one field based on the value of another field in the model</li> </ol> Update Many-to-many <pre><code>joe = Author.objects.create(name=\"Joe\")\nentry.authors.add(joe)\n</code></pre> Warning <p>If you try to add an author to an entry you just created, you need to first save this entry and then use 'add'.</p> Delete <pre><code># Delete one object\n&gt;&gt;&gt; e.delete()\n(1, {'weblog.Entry': 1})\n# Delete every objects from a queryset\n&gt;&gt;&gt; Entry.objects.filter(pub_date__year=2005).delete()\n(5, {'webapp.Entry': 5})\n</code></pre> Info <p>The delete method immediately deletes the object and returns the number of objects deleted and a dictionary with the number of deletions per object type.</p> Copy <p>Although there is no built-in method for copying model instances, it is possible to easily create new instance with all fields\u2019 values copied. In the simplest case, you can set pk to None. Using our blog example:</p> <pre><code>blog = Blog(name='My blog', tagline='Blogging is easy')\nblog.save() # blog.pk == 1\nblog.pk = None\nblog.save() # blog.pk == 2\n</code></pre> <p>Things get more complicated if you use inheritance. Consider a subclass of Blog:</p> <pre><code>class ThemeBlog(Blog):\ntheme = models.CharField(max_length=200)\ndjango_blog = ThemeBlog(name='Django', tagline='Django is easy', theme='python')\ndjango_blog.save() # django_blog.pk == 3\n</code></pre> <p>Due to how inheritance works, you have to set both pk and id to None:</p> <pre><code>django_blog.pk = None\ndjango_blog.id = None\ndjango_blog.save() # django_blog.pk == 4\n</code></pre> <p>This process doesn\u2019t copy relations that aren\u2019t part of the model\u2019s database table. For example, Entry has a ManyToManyField to Author. After duplicating an entry, you must set the many-to-many relations for the new entry:</p> <p><pre><code>entry = Entry.objects.all()[0] # some previous entry\nold_authors = entry.authors.all()\nentry.pk = None\nentry.save()\nentry.authors.set(old_authors)\n</code></pre> For a OneToOneField, you must duplicate the related object and assign it to the new object\u2019s field to avoid violating the one-to-one unique constraint. For example, assuming entry is already duplicated as above:</p> <pre><code>detail = EntryDetail.objects.all()[0]\ndetail.pk = None\ndetail.entry = entry\ndetail.save()\n</code></pre> Multiple (Bulk) <p>Use bulk methods to reduce the number of SQL statements.</p> <pre><code># Insert\nEntry.objects.bulk_create([\nEntry(headline='This is a test'),\nEntry(headline='This is only a test'),\n])\n# Update\nentries[0].headline = 'This is not a test'\nentries[1].headline = 'This is no longer a test'\nEntry.objects.bulk_update(entries, ['headline'])\n# Insert/Remove\nmy_band.members.add(me, my_friend) # Good\nmy_band.members.remove(me, my_friend) # Good\nmy_band.members.add(me) # Bad\nmy_band.members.add(my_friend) # Bad\nmy_band.members.remove(me) # Bad\nmy_band.members.remove(my_friend) # Bad\n</code></pre>"},{"location":"django/models/#retrieving-objects-in-querysets","title":"Retrieving objects in Querysets","text":"All <pre><code>all_entries = Entry.objects.all()\n</code></pre> Info <p>The all() method returns a QuerySet of all the objects in the database.</p> Filter/Exclude <pre><code>q1 = Entry.objects.filter(headline__startswith=\"What\")\nq2 = q1.exclude(pub_date__gte=datetime.date.today())\n</code></pre> Info <p>Filter/Exclude returns a new QuerySet </p> Get <p>If you know there is only one object that matches your query, you can use the get() method on a Manager which returns the object </p> <pre><code>one_entry = Entry.objects.get(pk=1)\n</code></pre> Warning <p>Returns an object ! Django will complain if more than one item matches the get() query. (MultipleObjectsReturned error) Django will complain if there are no results that match the query (DoesNotExist exception)</p>"},{"location":"django/models/#querysubsets","title":"QuerySubsets","text":"<p>Get only a part of the queryset</p> First <pre><code>all_entries = Entry.objects.all().first()\n</code></pre> Info <p>Returns the first object of the queryset</p> Slicing <pre><code>#Use case 1\nall_entries = Entry.objects.all()[:5]\n#Use case 2\nall_entries = Entry.objects.all()\nlast_entries = all_entries[len(all_entries)-5:]\n</code></pre> Info <ol> <li>Returns the first 5 elements</li> <li>returne the last 5 elements</li> </ol>"},{"location":"django/models/#field-lookups","title":"Field lookups","text":"<p>Basic lookups keyword arguments take the form <code>field__lookuptype=value</code></p> Greater/lower <pre><code>Entry.objects.filter(pub_date__lte='2006-01-01') # pub_date &lt;= 2006-01-01\nEntry.objects.filter(pub_date__lt='2006-01-01') # pub_date &lt; 2006-01-01\nEntry.objects.filter(pub_date__gte='2006-01-01') # pub_date &gt;= 2006-01-01\nEntry.objects.filter(pub_date__gt='2006-01-01') # pub_date &gt; 2006-01-01\n</code></pre> Text related <pre><code>Blog.objects.get(name__iexact=\"beatles blog\") # Case-insensitive match\nEntry.objects.get(headline__contains='Lennon') # Headline contains 'Lennon'\nEntry.objects.get(headline__icontains='Lennon') # Case-insensitive version\nEntry.objects.get(headline__startswith='Lennon') # Headline starts with 'Lennon'\nEntry.objects.get(headline__endswith='Lennon') # Headline ends with 'Lennon'\n# Case-insensitive versions : istartswith / iendswith\n</code></pre> Date related <p>Assuming we have :</p> <pre><code>start_date = datetime.date(2005, 1, 1)\nend_date = datetime.date(2005, 3, 31)\n</code></pre> <pre><code>Entry.objects.filter(pub_date__range=(start_date, end_date)) # Date in range\nEntry.objects.filter(pub_date__date__gt=datetime.date(2005, 1, 1)) # date &gt;=\nEntry.objects.filter(pub_date__year__gte=2005) # Year &gt;= 2005\nEntry.objects.filter(pub_date__month__gte=6) # Month &gt;= 6\nEntry.objects.filter(pub_date__day__gte=3) # Day &gt;= 3\nEntry.objects.filter(pub_date__week=52) # Week number = 52\nEntry.objects.filter(pub_date__week_day=2)\nEntry.objects.filter(pub_date__quarter=2)\nEntry.objects.filter(pub_date__time=datetime.time(14, 30))\nEvent.objects.filter(time__hour=5)\nEvent.objects.filter(timestamp__minute__gte=29)\nEvent.objects.filter(time__second=2)\n</code></pre> Regex <pre><code>Entry.objects.get(title__regex=r'^(An?|The) +')\n</code></pre> <p>Django offers a powerful and intuitive way to \u201cfollow\u201d relationships in lookups, taking care of the SQL JOINs for you automatically, behind the scenes</p> <pre><code>Blog.objects.filter(entry__headline__contains='Lennon') # Lookup\n</code></pre> Reference <p>Full list of field lookups</p>"},{"location":"django/models/#querying-jsonfield","title":"Querying JSONField","text":"<p>To query based on a given dictionary key, use that key as the lookup name:</p> <pre><code>&gt;&gt;&gt; Dog.objects.create(name='Rufus', data={\n...     'breed': 'labrador',\n...     'owner': {\n...         'name': 'Bob',\n...         'other_pets': [{\n...             'name': 'Fishy',\n...         }],\n...     },\n... })\n&lt;Dog: Rufus&gt;\n&gt;&gt;&gt; Dog.objects.create(name='Meg', data={'breed': 'collie', 'owner': None})\n&lt;Dog: Meg&gt;\n&gt;&gt;&gt; Dog.objects.filter(data__breed='collie')\n&lt;QuerySet [&lt;Dog: Meg&gt;]&gt;\n&gt;&gt;&gt; Dog.objects.filter(data__owner__name='Bob')\n&lt;QuerySet [&lt;Dog: Rufus&gt;]&gt;\n</code></pre>"},{"location":"django/models/#json-field-lookup","title":"JSON field lookup","text":"Contains <p>The returned objects are those where the given dict of key-value pairs are all contained in the top-level of the field</p> <pre><code>Dog.objects.filter(data__contains={'breed': 'collie'}) \n# &lt;QuerySet [&lt;Dog: Meg&gt;]&gt;\n</code></pre> Contained_by <p>The objects returned will be those where the key-value pairs on the object are a subset of those in the value passed</p> <pre><code>&gt;&gt;&gt; Dog.objects.create(name='Rufus', data={'breed': 'labrador', 'owner': 'Bob'})\n&lt;Dog: Rufus&gt;\n&gt;&gt;&gt; Dog.objects.create(name='Meg', data={'breed': 'collie', 'owner': 'Bob'})\n&lt;Dog: Meg&gt;\n&gt;&gt;&gt; Dog.objects.create(name='Fred', data={})\n&lt;Dog: Fred&gt;\n&gt;&gt;&gt; Dog.objects.filter(data__contained_by={'breed': 'collie', 'owner': 'Bob'})\n&lt;QuerySet [&lt;Dog: Meg&gt;, &lt;Dog: Fred&gt;]&gt;\n&gt;&gt;&gt; Dog.objects.filter(data__contained_by={'breed': 'collie'})\n&lt;QuerySet [&lt;Dog: Fred&gt;]&gt;\n</code></pre> <p>Warning</p> <p>Not supported on Oracle and SQLite</p> has_key / has_keys / has_any_keys <p>Returns objects where the given key is in the top-level of the data</p> <pre><code>&gt;&gt;&gt; Dog.objects.create(name='Rufus', data={'breed': 'labrador'})\n&lt;Dog: Rufus&gt;\n&gt;&gt;&gt; Dog.objects.create(name='Meg', data={'breed': 'collie', 'owner': 'Bob'})\n&lt;Dog: Meg&gt;\n&gt;&gt;&gt; Dog.objects.filter(data__has_key='owner')\n&lt;QuerySet [&lt;Dog: Meg&gt;]&gt;\nDog.objects.filter(data__has_keys=['breed', 'owner'])\n&lt;QuerySet [&lt;Dog: Meg&gt;]&gt;\nDog.objects.filter(data__has_any_keys=['breed', 'owner'])\n&lt;QuerySet [&lt;Dog: Rufus&gt;, &lt;Dog: Meg&gt;]&gt;\n</code></pre> Reference <p>Full list of field lookups</p>"},{"location":"django/models/#aggregate-annotate","title":"Aggregate / Annotate","text":"<p>Throughout this guide, we\u2019ll refer to the following models. These models are used to track the inventory for a series of online bookstores:</p> <pre><code>from django.db import models\nclass Author(models.Model):\nname = models.CharField(max_length=100)\nage = models.IntegerField()\nclass Publisher(models.Model):\nname = models.CharField(max_length=300)\nclass Book(models.Model):\nname = models.CharField(max_length=300)\npages = models.IntegerField()\nprice = models.DecimalField(max_digits=10, decimal_places=2)\nrating = models.FloatField()\nauthors = models.ManyToManyField(Author)\npublisher = models.ForeignKey(Publisher, on_delete=models.CASCADE)\npubdate = models.DateField()\nclass Store(models.Model):\nname = models.CharField(max_length=300)\nbooks = models.ManyToManyField(Book)\n</code></pre> <p>Here\u2019s how to do common aggregate queries, assuming the models above</p> <pre><code># Total number of books.\nBook.objects.count()\n# Total number of books with publisher=BaloneyPress\nBook.objects.filter(publisher__name='BaloneyPress').count()\n# Avg/Max/Min/...\nfrom django.db.models import Avg,Max,Min,Sum,StdDev,Variance\nBook.objects.all().aggregate(Avg('price'))\nBook.objects.all().aggregate(Max('price'))\nBook.objects.all().aggregate(Min('price'))\nBook.objects.all().aggregate(Sum('price'))\nBook.objects.all().aggregate(StdDev('price'))\nBook.objects.all().aggregate(Variance('price'))\n# Difference between the highest priced book and the average price of all books.\nfrom django.db.models import FloatField\nBook.objects.aggregate(\nprice_diff=Max('price', output_field=FloatField()) - Avg('price'))\n</code></pre> <p>Common Annotate queries (per object summaries)</p> <pre><code># Each publisher, each with a count of books as a \"num_books\" attribute.\nfrom django.db.models import Count\npubs = Publisher.objects.annotate(num_books=Count('book'))\n# Each publisher, with a separate count of books with a rating above and below 5\nfrom django.db.models import Q\nabove_5 = Count('book', filter=Q(book__rating__gt=5))\nbelow_5 = Count('book', filter=Q(book__rating__lte=5))\npubs = Publisher.objects.annotate(below_5=below_5,above_5=above_5)\npubs[0].above_5 # 23\npubs[0].below_5 # 12   \n# The top 5 publishers, in order by number of books.\npubs = Publisher.objects.annotate(num_books=Count('book')).order_by('-num_books')[:5]\npubs[0].num_books # 1323\n# generate a list of books that have more than one author\nBook.objects.annotate(num_authors=Count('authors')).filter(num_authors__gt=1)\n# generate a list of authors with a count of highly rated books\nhighly_rated = Count('book', filter=Q(book__rating__gte=7))\nAuthor.objects.annotate(num_books=Count('book'), highly_rated_books=highly_rated)\n</code></pre> <p>If in doubt, inspect the SQL query!</p> <p>In order to understand what happens in your query, consider inspecting the query property of your QuerySet</p> Reference <p>Full list of aggregation methods</p>"},{"location":"django/models/#custom-managers","title":"Custom managers","text":"<p>You can use a custom Manager in a particular model by extending the base Manager class and instantiating your custom Manager in your model.</p> <p>There are two reasons you might want to customize a Manager: to add extra Manager methods, and/or to modify the initial QuerySet the Manager returns.</p>"},{"location":"django/models/#adding-extra-manager-methods","title":"Adding extra manager methods","text":"<p>Adding extra Manager methods is the preferred way to add \u201ctable-level\u201d functionality to your models. (For \u201crow-level\u201d functionality \u2013 i.e., functions that act on a single instance of a model object \u2013 use Model methods, not custom Manager methods.)</p> <p>For example, this custom Manager adds a method with_counts():</p> <pre><code>from django.db import models\nfrom django.db.models.functions import Coalesce\nclass PollManager(models.Manager):\ndef with_counts(self):\nreturn self.annotate(\nnum_responses=Coalesce(models.Count(\"response\"), 0)\n)\nclass OpinionPoll(models.Model):\nquestion = models.CharField(max_length=200)\nobjects = PollManager()\nclass Response(models.Model):\npoll = mode\n</code></pre> <p>With this example, you\u2019d use OpinionPoll.objects.with_counts() to get a QuerySet of OpinionPoll objects with the extra num_responses attribute attached.</p>"},{"location":"django/models/#modifying-a-managers-initial-queryset","title":"Modifying a manager\u2019s initial QuerySet","text":"<p>You can override a Manager\u2019s base QuerySet by overriding the Manager.get_queryset() method. get_queryset() should return a QuerySet with the properties you require.</p> <pre><code># First, define the Manager subclass.\nclass DahlBookManager(models.Manager):\ndef get_queryset(self):\nreturn super().get_queryset().filter(author='Roald Dahl')\n# Then hook it into the Book model explicitly.\nclass Book(models.Model):\ntitle = models.CharField(max_length=100)\nauthor = models.CharField(max_length=50)\nobjects = models.Manager() # The default manager.\ndahl_objects = DahlBookManager() # The Dahl-specific manager.\n</code></pre> Reference <p>Managers</p>"},{"location":"git/","title":"Essentials","text":""},{"location":"git/#introduction","title":"Introduction","text":"<p>Git is a decentralized version management software: It allows to store data remotely but also locally. Git does not rely on a centralized server, but uses a peer-to-peer connection system. The developed computer code is stored not only on the computer of each project contributor, but it can also be stored on a dedicated server (Remote).</p>"},{"location":"git/#git-init","title":"Git init","text":"<p>Initialize a .git repository. It can be used to convert an existing, unversioned project to a Git repository or initialize a new, empty repository.</p> <pre><code>git init\n</code></pre>"},{"location":"git/#git-config","title":"Git config","text":"<p>Setup user details. Git will associate them with locally created commits.</p> <pre><code>git config --global user.email \"myemail@gmail.com\"\ngit config --global user.name \"MyUsername\"\n</code></pre> <p>To see current config :</p> <pre><code>git config --list </code></pre> Result <pre><code>user.name=MyUsername\nuser.email=myemail@gmail.com\n</code></pre>"},{"location":"git/#git-status","title":"Git status","text":"<p>Get informations about the current git directory (Untracked/new/changed/removed files) <pre><code>git status </code></pre></p>"},{"location":"git/#git-addreset","title":"Git add/reset","text":"<p>Add/remove files from git tracking</p>"},{"location":"git/#git-add","title":"Git add","text":"<p>Add to tracking (Stage changes)</p> Single File <pre><code>git add readme.md </code></pre> Info <p>readme.md file is staged</p> Every HTML Files <pre><code>git add *.html\n</code></pre> Info <p>Every HTML files are staged</p> All Files <pre><code>git add --all\n</code></pre> Tip <p>Every available files are staged. You should <code>git status</code> first to make sure you are not tracking unwanted files.</p>"},{"location":"git/#git-reset","title":"Git reset","text":"<p>Remove files from git tracking</p> Single File <pre><code>git reset HEAD readme.md </code></pre> Info <p>readme.md file is not tracked anymore (But changes made to the file remain unchanged)</p> All Files <pre><code>git reset HEAD\n</code></pre> Info <p>Cancels all last git add (Unstage all)</p>"},{"location":"git/#git-commit","title":"Git commit","text":"<p>Commit changes to git. Only tracked files are committed. You can add files and commit with the same command line</p> Commit <pre><code>git commit -m \"Mon premier commit\"\n</code></pre> Add + Commit <pre><code>git commit -a -m \"Premiere modif\"\n</code></pre>"},{"location":"git/#git-log","title":"Git log","text":"<p>Git logging to see details about commits.</p> <ul> <li>Git log : Basic operation</li> <li>Oneline : Use One-line Display</li> <li>File Specific : Display commits associated with a specific file</li> </ul> Git log <pre><code>git log  # Shows last commits\ngit log -n 2 # Shows the last 2 commits\n</code></pre> Oneline <pre><code>git log --oneline </code></pre> Exemple <pre><code>1653f44 Create README.md\n8f3add2 Add requirements.txt\n1a5c42c New theme material\n3af103e First commit\n</code></pre> File specific <pre><code>git log -p readme.md </code></pre>"},{"location":"git/#git-diff","title":"Git diff","text":"<p>Display what changed since last commit</p> <pre><code>git diff\n</code></pre>"},{"location":"git/#gitignore","title":"Gitignore","text":"<p>Setup files to ignore when versioning with a .gitignore file</p> <pre><code>*.tmp        # Ignore tout les fichiers .tmp\nlog.txt      # Ignore le fichier log.txt\ntmp/*        # Ignore tout les fichiers du dossier tmp\n</code></pre>"},{"location":"git/#sources","title":"Sources","text":"<ol> <li> <p>Git Docs \u21a9</p> </li> </ol>"},{"location":"git/branch/","title":"Git branch","text":"<p>In this exemple we take :  <code>branch_name = igloo</code></p>"},{"location":"git/branch/#create","title":"Create","text":"<pre><code>git branch igloo\n</code></pre>"},{"location":"git/branch/#checkout","title":"Checkout","text":"<p>Move to a specific branch</p> Move to Igloo <pre><code>git checkout igloo\n</code></pre> Move to master <pre><code>git checkout master\n</code></pre>"},{"location":"git/branch/#merge","title":"Merge","text":"<p>Merch branch with Master branch</p> Merge <pre><code>git checkout master\ngit merge igloo\n</code></pre> Warning <p>This might create a \"Merge branch\" commit if master was ahead of branch When master branch is ahead, use rebase</p> Merge &amp; Rebase history <pre><code>git checkout igloo\ngit rebase master\ngit checkout master\ngit merge igloo\n</code></pre> Info <p><code>git rebase master</code> : redesign branch now start from last master commit (even if he was ahead before) Igloo Branch history is added to master branch history </p> Interactive <pre><code>git checkout igloo\ngit rebase -i master\n</code></pre> Tip <p>pick = use commit  squash = use commit, but meld into previous commit fixup = like \"squash\", but discard the commit's log message  </p> <pre><code>git checkout master\ngit merge igloo\n</code></pre>"},{"location":"git/branch/#delete","title":"Delete","text":"<p>Delete branch after successful merge <pre><code>git branch -d igloo\n</code></pre></p>"},{"location":"git/branch/#list","title":"List","text":"<p>List local and remote branches <pre><code>git branch -a\n</code></pre></p>"},{"location":"git/commit/","title":"Undo commits &amp; changes","text":""},{"location":"git/commit/#revert-a-commit-doesnt-change-history","title":"Revert a commit (Doesn't change history)","text":"<p>Revert every changes made in a commit with a new 'revert' commit</p> Full Commit <pre><code>git revert 7921a1e\n</code></pre> Specific File <pre><code>git revert 7921a1e index.html\n</code></pre>"},{"location":"git/commit/#revert-changes-made-after-last-commit","title":"Revert changes made after last commit","text":"<p>Revert every changes made after last commit. 3 modes available :</p> <ul> <li>Soft : Keep changes, Unstage changes</li> <li>Mixed(default) : Keep changes, Unstage changes</li> <li>Hard : Delete changes</li> </ul> Mixed <pre><code>git reset --mixed\n</code></pre> Soft <pre><code>git reset --soft\n</code></pre> Hard <pre><code>git reset --hard\n</code></pre> <p>Warning<p>You permanently lose every changes made locally since last commit</p> </p>"},{"location":"git/commit/#revert-to-specific-commit","title":"Revert to specific commit","text":"<p>Use Case #1 : How to reset last terrible commit (Last good commit is 32e4fc4)) ? Use Case #2 : How to rewrite history since commit 47e9cf6 ?</p> Case #1 <pre><code>git reset 32e4fc4\n# Edit files as necessary\ngit commit -a -m \"Fix terrible bug\"\n</code></pre> <p>Info</p> <p>Go in the past, make changes to fix bug and then commit to rewrite history.</p> Case #2 <pre><code>git reset 47e9cf6\ngit commit -a -m \"History rewritten, changes retains\"\n</code></pre> <p>Info</p> <p>We go back to commit 47e9cf6. History is removed but files are not modified locally. Then we commit changes, history between commit and master has been rewritten.</p>"},{"location":"git/commit/#remove-a-specific-commit","title":"Remove a specific commit","text":"<p>Use Case : You leaked information in a specific commit and you want to completely remove this commit ? </p> Remove commit from history <pre><code>git rebase -i HEAD~x\n# x is the number of commits\n# Enter \"drop\" besides the commit you want to drop\ngit  push --force-with-lease\n</code></pre> <p>Danger</p> <p>Don't forget to first copy changes you made in the commit if you want to reupoad a fixed version in a new commit after</p>"},{"location":"git/commit/#amend","title":"Amend","text":"<p>Combine few commits</p> Default (Confirm commit message) <pre><code>git commit --amend\n</code></pre> Change commit message <pre><code>git commit --amend -m \"New commit message\"\n</code></pre> <p>Warning</p> <p>Only do this locally on commits we haven't push to remote yet !</p>"},{"location":"git/fork_pullrequest/","title":"Fork, Issues &amp; Pull Request","text":"<p>Might be usefull to have a SSH connection setup (Use <code>ssh-keygen -t rsa -C \"youremail@gmail.com\"</code> and add the public key to your Github account)</p>"},{"location":"git/fork_pullrequest/#close-an-issue","title":"Close an issue","text":"<p>you can close an issue with a special syntaxe in your bug solving commit</p> <pre><code>git commit -a -m \"fixes #12 Solve Issue n\u00b012\"\n</code></pre> Tip <p>You can replace \u201cfixes\u201d keyword with any in this list : \u201cFixed\u201d, \u201cFix\u201d, \u201cCloses\u201d, \u201cClosed\u201d, or \u201cClose\u201d </p>"},{"location":"git/fork_pullrequest/#fork-a-repository","title":"Fork a repository","text":"<p>Allow user to work on his own version of a repository Validation is needed to add changes to the main project via a pull request</p> Danger <p>Never do commits to your fork master. Always work on a branch Master branch should only be used to synchronize your fork with owner repository    </p>"},{"location":"git/fork_pullrequest/#initial-fork","title":"Initial Fork","text":"<p>Just go to a Github repository and click the \u201cFork\u201d option This also import repository history</p> <p>Now clone this, do your changes and push it to a remote branch</p> <pre><code>git clone https://github.com/UnknownPlatypus/youtube-dl.git\ngit branch readme-fix\ngit checkout readme-fix\ngit commit -a -m \"Wonderful readmefix.md\"\ngit push origin readme-fix\n</code></pre> Tip <p>Always create a new branch because you don't want to do pull request on master since the main project master might have changed in between.</p>"},{"location":"git/fork_pullrequest/#upstream-fork","title":"Upstream Fork","text":"<p>If you want to update your fork with owner changes Checkout master branch</p> <pre><code>git remote add upstream https://github.com/ytdl-org/youtube-dl.git\ngit remote -v\n</code></pre> Info <p>You should see this : <pre><code>origin  https://github.com/UnknownPlatypus/youtube-dl.git (fetch)\norigin  https://github.com/UnknownPlatypus/youtube-dl.git (push)\nupstream  https://github.com/ytdl-org/youtube-dl.git (fetch)\nupstream  https://github.com/ytdl-org/youtube-dl.git (push)\n</code></pre></p> <p>Now you need to collect code from the upstream remote :</p> <pre><code>git fetch upstream\ngit branch -a\n</code></pre> Info <p>You should get a <code>remotes/upstream/master</code></p> <p>Now merge with your local master :</p> <pre><code>git merge upstream/master\n</code></pre>"},{"location":"git/fork_pullrequest/#pull-request","title":"Pull request","text":"<p>Do this on Github with the \u201cPull Request\u201d option Repo owner will get a notification and accept or not your request A pull request  conversation is created to discuss about potential changes to make</p>"},{"location":"git/git_flow/","title":"Git Flow","text":"<p>Everything you need to know about this is here</p> <p>Git Flow</p>"},{"location":"git/remote/","title":"Remote","text":"<p>Save all your git history to a remote (Github, Gitlab, ...)</p>"},{"location":"git/remote/#list","title":"List","text":"<p>List every remotes or branches</p> Remote List <pre><code>git remote -v\n</code></pre> Info <p>List every remote available</p> Remote Branch List <pre><code>git branch -r\n</code></pre> Info <p>List every remote branches available</p>"},{"location":"git/remote/#create","title":"Create","text":"<p>The template is : <code>git remote add &lt;remote_name&gt; &lt;adress&gt;</code></p> Github HTTPS <pre><code>git remote add origin https://github.com/UnknownPlatypus/sound-play.git\n</code></pre> Warning <p>Untracked changes are not stashed Always use <code>git status</code> first</p> Github SSH <pre><code>git remote add origin git@github.com:User/UserRepo.git\n</code></pre> Info <p>Untracked changes are also stashed !  </p> Local Remote <pre><code>cd C:/path/to/local/remote\ngit init --bare\n\ncd MyGitProject\ngit remote add origin C:/path/to/local/remote\n</code></pre> Info <p>Local folder can be use as a remote  </p>"},{"location":"git/remote/#clone","title":"Clone","text":"<p>The template is : <code>git clone &lt;remote_link&gt; &lt;local_name&gt;</code> </p> Default <pre><code>git clone https://github.com/UnknownPlatypus/sound-play.git\n</code></pre> Info <p>Clone repository in a 'sound-play' folder</p> Rename <pre><code>git clone https://github.com/UnknownPlatypus/sound-play.git custom_name   </code></pre> Info <p>Clone repository in a 'custom_name' folder</p> Depth limit <pre><code>git clone --depth 5 https://github.com/UnknownPlatypus/sound-play.git\n</code></pre> Warning <p>Only keep the last 5 commits in local history</p>"},{"location":"git/remote/#push","title":"Push","text":"<p>The template is : <code>git push &lt;remote_name&gt; &lt;local_branch_name&gt;</code> Best practice to use remote_name = origin for the main remote (it's Github default for ex)</p> Push branch <pre><code>git push origin master\ngit push origin igloo\n</code></pre> Remove remote branch <pre><code>git remote rm igloo\n</code></pre>"},{"location":"git/remote/#pull","title":"Pull","text":"<p>The template is : <code>git pull &lt;remote_name&gt; &lt;remote_branch_name&gt;</code> </p> Pull branch <pre><code>git pull origin master\n</code></pre> Warning <p>Might create a \"Merge branch\" commit if local is ahead of remote Use rebase to avoid that </p> Pull branch &amp; Rebase History <pre><code>git pull --rebase origin master\n</code></pre> Setup rebase as default <pre><code>git config --global branch.autosetuprebase always\n</code></pre>"},{"location":"git/remote/#rename","title":"Rename","text":"<pre><code>git remote rename origin lol\n</code></pre> Info <p>Now the remote name is 'lol' instead of 'origin' You can use <code>git remote -v</code> to see that</p>"},{"location":"git/remote/#git-clone-someone-elses-repository-git-push-to-your-own-repository","title":"Git clone someone else's repository &amp; Git push to your own repository","text":"Linked to origin repo <ol> <li> <p>Create a new repository at github.com. (this is your repository) Give it the same name as the other repository. Don't initialize it with a README, .gitignore, or license.</p> </li> <li> <p>Clone the other repository to your local machine. (if you haven't done so already)     <code>git clone https://github.com/other-account/other-repository.git</code></p> </li> <li> <p>Rename the local repository's current 'origin' to 'upstream'.      <code>git remote rename origin upstream</code></p> </li> <li> <p>Give the local repository an 'origin' that points to your repository.     <code>git remote add origin https://github.com/your-account/your-repository.git</code></p> </li> <li> <p>Push the local repository to your repository on github.     <code>git push origin master</code></p> </li> </ol> Unlinked to origin repo <ol> <li> <p>Create a new repository at github.com. (this is your repository) Give it the same name as the other repository. Don't initialize it with a README, .gitignore, or license.</p> </li> <li> <p>Clone the other repository to your local machine. (if you haven't done so already)     <code>git clone https://github.com/other-account/other-repository.git</code></p> </li> <li> <p>Change the local repository's current 'origin' to a new url.      <code>git remote set-url origin http://github.com/YOU/YOUR_REPO</code></p> </li> <li> <p>Push the local repository to your repository on github.     <code>git push origin master</code></p> </li> </ol>"},{"location":"git/stash/","title":"Stash","text":"<p>Use Stash to save current changes in a temporary memory.</p>"},{"location":"git/stash/#create","title":"Create","text":"Default <pre><code>git stash\n</code></pre> <p>Warning</p> <p>Untracked changes are not stashed Always use <code>git status</code> first</p> Stash Untracked <pre><code>git stash -u\n</code></pre> <p>Info</p> <p>Untracked changes are also stashed !  </p> Rename Stash <pre><code>git stash save My Stash cool name\n</code></pre> <p>Info</p> <p>Stash is saved with the name \"My stash cool name\"  </p>"},{"location":"git/stash/#list","title":"List","text":"<pre><code>git stash list\n</code></pre> <p>Exemple</p> <p>Return a stash list</p> <pre><code>stash@{0}: On master : My stash cool name\nstash@{1} : WIP on master : Remove IE9 support\n</code></pre>"},{"location":"git/stash/#apply","title":"Apply","text":"<p>Bring changes back </p> Most Recent Stash <pre><code>git stash apply\n</code></pre> <p>Info</p> <p>Apply most recent stash</p> Specific Stash <pre><code>git stash apply stash@{1}\n</code></pre> <p>Info</p> <p>Apply stash n\u00b01</p>"},{"location":"git/stash/#delete","title":"Delete","text":"<p>Delete remaining stash</p> Most Recent Stash <pre><code>git stash drop\n</code></pre> <p>Info</p> <p>Drop most recent stash</p> Specific Stash <pre><code>git stash drop stash@{1}\n</code></pre> <p>Info</p> <p>Drop stash n\u00b01</p>"},{"location":"git/stash/#show","title":"Show","text":"<p>Display changes saved in stash</p> Most Recent Stash <pre><code>git stash show\n</code></pre> <p>Info</p> <p>Show most recent stash</p> Specific Stash <pre><code>git stash show stash@{1}\n</code></pre> <p>Info</p> <p>Show stash n\u00b01</p> More details <pre><code>git stash show -p stash@{1}\n</code></pre> <p>Tip</p> <p>Add more details with <code>-p</code></p>"},{"location":"git/stash/#stash-to-another-branch","title":"Stash to another branch","text":"<p>Use Case : Move all current changes to a new branch</p> <pre><code>git stash git stash branch iglooStash\n</code></pre> <p>Info</p> <p>Automatically create &amp; move you to 'iglooStash' branch Move changes to this branch Remove latest stash</p>"},{"location":"git/usecases/","title":"Use Cases","text":"<p>Classic git use cases</p>"},{"location":"git/usecases/#use-case-1-git-clone-someone-elses-repository-git-push-to-your-own-repository","title":"Use Case #1 : Git clone someone else's repository &amp; Git push to your own repository","text":"Linked to origin repo <ol> <li> <p>Create a new repository at github.com. (this is your repository) Give it the same name as the other repository. Don't initialize it with a README, .gitignore, or license. </p> </li> <li> <p>Clone the other repository to your local machine. (if you haven't done so already) <code>git clone https://github.com/other-account/other-repository.git</code> </p> </li> <li> <p>Rename the local repository's current 'origin' to 'upstream'. <code>git remote rename origin upstream</code> </p> </li> <li> <p>Give the local repository an 'origin' that points to your repository. <code>git remote add origin https://github.com/your-account/your-repository.git</code> </p> </li> <li> <p>Push the local repository to your repository on github. <code>git push origin master</code> </p> </li> </ol> Unlinked to origin repo <ol> <li> <p>Create a new repository at github.com. (this is your repository) Give it the same name as the other repository. Don't initialize it with a README, .gitignore, or license.   </p> </li> <li> <p>Clone the other repository to your local machine. (if you haven't done so already)    <code>git clone https://github.com/other-account/other-repository.git</code> </p> </li> <li> <p>Change the local repository's current 'origin' to a new url.    <code>git remote set-url origin http://github.com/YOU/YOUR_REPO</code> </p> </li> <li> <p>Push the local repository to your repository on github.   <code>git push origin master</code> </p> </li> </ol>"},{"location":"git/usecases/#use-case-2-undo-last-git-push","title":"Use Case #2 : Undo last git push","text":"Template <pre><code>git push -f origin last_known_good_commit:branch_name\n</code></pre> Usual (master branch) <pre><code>git push -f origin full_commit_code:master\n</code></pre>"},{"location":"git/usecases/#use-case-3-move-git-folder-to-child-folder","title":"Use Case #3 : Move git folder to child folder","text":"<ol> <li> <p>Manually move your .git folder to the place you want it (target_dir)   </p> </li> <li> <p>Navigate to that folder   <pre><code>cd target_dir\n</code></pre></p> </li> <li> <p>Then add all the changes to the staging area. Git will detect these files as renamed versions of old files that were 'lost' and so no history will be lost.   <pre><code>git add .\n</code></pre></p> </li> <li> <p>Commit all the changes with the -a command. The -a command stands for all. It tells the commit command to automatically stage files that have been modified and deleted whilst new files that you have not told Git about are not affected. <pre><code>git commit -a -m \"move git folder fix\"\n</code></pre></p> </li> <li> <p>Finally, push the changes to your repo. <pre><code>git push\n</code></pre></p> </li> </ol> Warning <p>You may receive the following git merge error message: \"Please enter a commit message to explain why this merge is necessary, especially if it merges an updated upstream into a topic branch\"</p> <p>To solve this:</p> <pre><code>Press \u201ci\u201d\nWrite your merge message\nPress the \u201cesc\u201d key.\nType \u201c:wq\u201d\nThen press enter\n</code></pre> <p>You will then to git push again and you're done!</p>"},{"location":"git/usecases/#use-case-4-duplicate-a-repo","title":"Use Case #4 : Duplicate a repo","text":"<ol> <li> <p>Move to a scratch dir <pre><code>mkdir foo\ncd foo\n</code></pre></p> </li> <li> <p>Make a bare clone of the repository   <pre><code>git clone --bare https://github.com/exampleuser/old-repository.git\n</code></pre></p> </li> <li> <p>Mirror-push to the new repository <pre><code>cd old-repository.git\ngit push --mirror https://github.com/exampleuser/new-repository.git\n</code></pre></p> </li> <li> <p>Manually delete the old \"foo\" folder    </p> </li> </ol>"},{"location":"hellowatt/troubleshooting/","title":"Hello Watt - Refs","text":""},{"location":"hellowatt/troubleshooting/#profiling-panel-server-error","title":"Profiling Panel server error","text":"try_multiple_views.py<pre><code>TryMultipleViews.__code__ = TryMultipleViews.__call__.__code__\nTryMultipleViews.__closure__ = TryMultipleViews.__call__.__closure__\n</code></pre>"},{"location":"heroku/","title":"Django deploy to Heroku","text":""},{"location":"heroku/#prerequisite","title":"Prerequisite","text":"<p>If you plan on deploying your django app on heroku, you need to make sure you are using a compatible python version in your project.</p> <p>The best way to ensure that is to first build you project in a virtual environment using one of these supported python versions :</p> <ul> <li><code>python-3.9.1</code> </li> <li><code>python-3.8.7</code> </li> <li><code>python-3.7.9</code> </li> <li><code>python-3.6.12</code></li> </ul> <p>You allo need to install Heroku Client to create and manage your Heroku apps directly from the terminal</p>"},{"location":"heroku/#create-virtual-environment","title":"Create Virtual Environment","text":"<p>Go to you project folder and create a virtual environment named 'venv' using this python command</p> <pre><code>python -m venv venv\n</code></pre> <p>Now if you want to install packages, go inside your virtual environment (venv) <pre><code>venv\\Scripts\\activate.bat\n(venv) C:\\Users\\&lt;username&gt;\\MyProject&gt;\n</code></pre></p> Important <p>Do that every time you need to install a new python package ! Otherwise, the package will be installed globally on your computer</p>"},{"location":"heroku/#heroku-cli","title":"Heroku CLI","text":"<p>The Heroku Command Line Interface (CLI) makes it easy to create and manage your Heroku apps directly from the terminal. It\u2019s an essential part of using Heroku.</p> <p>Download the Heroku Client using the appropriate version here</p> <p>To verify your CLI installation, use the heroku --version command</p> <pre><code>c:\\&gt; heroku --version\nheroku/7.47.9 win32-x64 node-v12.16.2\n</code></pre> <p>Now login to connect to your Heroku account :</p> Browser login <pre><code>heroku login\n</code></pre> Shell login <pre><code>heroku login -i\n</code></pre>"},{"location":"heroku/#complementary-resources","title":"Complementary Resources","text":"<ul> <li>Heroku Django App Configuration</li> <li>Deployer une application Django avec Heroku(FR) </li> </ul>"},{"location":"heroku/app_prepare/","title":"Preparing the App","text":""},{"location":"heroku/app_prepare/#requirementstxt","title":"Requirements.txt","text":"<p>Heroku will install you project on a server so you need to provide the full list of python package required. This is done with a requirements.txt file.</p> <p>Create this file using this command, this will gather every package installed and render them to a requirements.txt file</p> <pre><code>venv\\Scripts\\activate.bat\npip freeze -&gt; requirements.txt\n</code></pre> Exemple <p>requirements.txt for Basic django setup with whitenoise <pre><code>asgiref==3.3.1\nDjango==3.1.6\npytz==2021.1\nsqlparse==0.4.1\nwhitenoise==5.2.0\n</code></pre></p>"},{"location":"heroku/app_prepare/#procfile","title":"Procfile","text":""},{"location":"heroku/app_prepare/#runtimetxt","title":"runtime.txt","text":""},{"location":"heroku/app_prepare/#heroku_settingspy","title":"heroku_settings.py","text":""},{"location":"heroku/app_prepare/#static-assets","title":"Static Assets","text":""},{"location":"heroku/app_prepare/#postgresql-connection","title":"PostgreSQL connection","text":"<p>dj-database-url</p> Move to Igloo Move to master"},{"location":"heroku/deployment/","title":"Deployment","text":""},{"location":"heroku/deployment/#create-app","title":"Create App &amp;","text":""},{"location":"heroku/deployment/#setup-plugins-env-variables","title":"Setup plugins &amp; Env variables","text":""},{"location":"heroku/deployment/#deploy-heroku-push","title":"Deploy (heroku push)","text":""},{"location":"heroku/deployment/#heroku_settingspy","title":"heroku_settings.py","text":""},{"location":"heroku/deployment/#migrate-database","title":"Migrate Database","text":""},{"location":"heroku/deployment/#create-superuser","title":"Create superuser","text":""},{"location":"heroku/deployment/#staging-server","title":"Staging server","text":"<p>You can create a stagging server on heroku to pre-deploy tyour app and test it in a realistic environment before merging to production.</p> Move to Igloo Move to master"},{"location":"heroku/troubleshooting/","title":"Troubleshooting","text":""},{"location":"heroku/troubleshooting/#enable-logging","title":"Enable logging","text":""},{"location":"heroku/troubleshooting/#user-uploaded-files-media","title":"User uploaded files (media)","text":""},{"location":"heroku/troubleshooting/#valueerror-missing-staticfiles-manifest-entry-for-playlistpicture","title":"ValueError: Missing staticfiles manifest entry for '/playlist/picture'","text":""},{"location":"javascript/","title":"Modern JavaScript Cheatsheet","text":"<p>Widely inspired from meaudru Modern JavaScript Cheatsheet with some alterations.</p>"},{"location":"javascript/#introduction","title":"Introduction","text":""},{"location":"javascript/#motivation","title":"Motivation","text":"<p>This document is a cheatsheet for JavaScript you will frequently encounter in modern projects and most contemporary sample code.</p> <p>This guide is not intended to teach you JavaScript from the ground up, but to help developers with basic knowledge who may struggle to get familiar with modern codebases (or let's say to learn React for instance) because of the JavaScript concepts used.</p> <p>Besides, I will sometimes provide personal tips that may be debatable but will take care to mention that it's a personal recommendation when I do so.</p> <p>Note: Most of the concepts introduced here are coming from a JavaScript language update (ES2015, often called ES6). You can find new features added by this update here; it's very well done.</p>"},{"location":"javascript/#table-of-contents","title":"Table of Contents","text":"<ul> <li> <p>Variable declaration: var, const, let</p> <ul> <li>Short explanation</li> <li>Sample code</li> <li>Detailed explanation</li> <li>External resource</li> </ul> </li> <li> <p>Arrow function</p> <ul> <li>Sample code</li> <li>Detailed explanation<ul> <li>Concision</li> <li>this reference</li> </ul> </li> <li>Useful resources</li> </ul> </li> <li> <p>Function default parameter value</p> <ul> <li>External resource</li> </ul> </li> <li> <p>Destructuring objects and arrays</p> <ul> <li>Explanation with sample code</li> <li>Useful resources</li> </ul> </li> <li> <p>Array methods - map / filter / reduce</p> <ul> <li>Sample code</li> <li>Explanation<ul> <li>Array.prototype.map()</li> <li>Array.prototype.filter()</li> <li>Array.prototype.reduce()</li> <li>Array.prototype.find()</li> </ul> </li> <li>External Resource</li> </ul> </li> <li> <p>Spread operator \"...\"</p> <ul> <li>Sample code</li> <li>Explanation<ul> <li>In iterables (like arrays)</li> <li>Function rest parameter</li> <li>Object properties spreading</li> </ul> </li> <li>External resources</li> </ul> </li> <li> <p>Object property shorthand</p> <ul> <li>Explanation</li> <li>External resources</li> </ul> </li> <li> <p>Promises</p> <ul> <li>Sample code</li> <li>Explanation<ul> <li>Create the promise</li> <li>Promise handlers usage</li> </ul> </li> <li>External Resources</li> </ul> </li> <li> <p>Template literals</p> <ul> <li>Sample code</li> <li>External resources</li> </ul> </li> <li> <p>Tagged Template Literals</p> <ul> <li>External resources</li> </ul> </li> <li> <p>Imports / Exports</p> <ul> <li>Explanation with sample code<ul> <li>Named exports</li> <li>Default import / export</li> </ul> </li> <li>External resources</li> </ul> </li> <li> <p>JavaScript this</p> <ul> <li>External resources</li> </ul> </li> <li> <p>Class</p> <ul> <li>Samples</li> <li>External resources</li> </ul> </li> <li> <p>Extends and super keywords</p> <ul> <li>Sample Code</li> <li>External Resources</li> </ul> </li> <li> <p>Async Await</p> <ul> <li>Sample code</li> <li>Explanation with sample code</li> <li>Error handling</li> <li>External resources</li> </ul> </li> <li> <p>Truthy / Falsy</p> <ul> <li>External resources</li> </ul> </li> <li> <p>Anamorphisms / Catamporphisms</p> <ul> <li>Anamorphisms</li> <li>Catamorphisms</li> <li>External resources</li> </ul> </li> <li> <p>Generators</p> <ul> <li>External resources</li> </ul> </li> <li> <p>Static Methods</p> <ul> <li>Short Explanation</li> <li>Sample Code</li> <li>Detailed Explanation<ul> <li>Calling other static methods from a static method</li> <li>Calling static methods from non-static methods</li> </ul> </li> <li>External resources</li> </ul> </li> <li> <p>Glossary</p> <ul> <li>Scope</li> <li>Variable mutation</li> </ul> </li> </ul>"},{"location":"javascript/#complementary-resources","title":"Complementary Resources","text":"<p>When you struggle to understand a notion, I suggest you look for answers on the following resources:</p> <ul> <li>MDN (Mozilla Developer Network)</li> <li>You don't know JS (book)</li> <li>Eloquent JavaScript (book)</li> <li>Douglas Crockford's blog</li> <li>ES6 Features with examples</li> <li>Wes Bos blog (ES6)</li> <li>Javascript Basics for Beginners - a free Udacity course</li> <li>Reddit (JavaScript)</li> <li>Google to find specific blog and resources</li> <li>StackOverflow</li> </ul>"},{"location":"javascript/#glossary","title":"Glossary","text":""},{"location":"javascript/#scope","title":"Scope","text":"<p>The context in which values and expressions are \"visible,\" or can be referenced. If a variable or other expression is not \"in the current scope,\" then it is unavailable for use.</p> <p>Source: MDN</p>"},{"location":"javascript/#variable-mutation","title":"Variable mutation","text":"<p>A variable is said to have been mutated when its initial value has changed afterward.</p> <pre><code>var myArray = [];\nmyArray.push(\"firstEl\") // myArray is being mutated\n</code></pre> <p>A variable is said to be immutable if it can't be mutated.</p> <p>Check MDN Mutable article for more details.</p>"},{"location":"javascript/anamorphisms/","title":"Anamorphisms and Catamorphisms","text":""},{"location":"javascript/anamorphisms/#anamorphisms","title":"Anamorphisms","text":"<p>Anamorphisms are functions that map from some object to a more complex structure containing the type of the object. It is the process of unfolding a simple structure into a more complex one. Consider unfolding an integer to a list of integers. The integer is our initial object and the list of integers is the more complex structure.</p> <p>Sample code</p> <pre><code>function downToOne(n) {\nconst list = [];\nfor (let i = n; i &gt; 0; --i) {\nlist.push(i);\n}\nreturn list;\n}\ndownToOne(5)\n//=&gt; [ 5, 4, 3, 2, 1 ]\n</code></pre>"},{"location":"javascript/anamorphisms/#catamorphisms","title":"Catamorphisms","text":"<p>Catamorphisms are the opposite of Anamorphisms, in that they take objects of more complex structure and fold them into simpler structures. Take the following example <code>product</code> which take a list of integers and returns a single integer.</p> <p>Sample code</p> <pre><code>function product(list) {\nlet product = 1;\nfor (const n of list) {\nproduct = product * n;\n}\nreturn product;\n}\nproduct(downToOne(5)) // 120\n</code></pre>"},{"location":"javascript/anamorphisms/#external-resources","title":"External resources","text":"<ul> <li>Anamorphisms in JavaScript</li> <li>Anamorphism</li> <li>Catamorphism</li> </ul>"},{"location":"javascript/array_methods/","title":"Array methods - map / filter / reduce / find","text":"<p>Map, filter, reduce and find are array methods that are coming from a programming paradigm named functional programming.</p> <p>To sum it up:</p> <ul> <li>Array.prototype.map() takes an array, does something on its elements and returns an array with the transformed elements.</li> <li>Array.prototype.filter() takes an array, decides element by element if it should keep it or not and returns an array with the kept elements only</li> <li>Array.prototype.reduce() takes an array and aggregates the elements into a single value (which is returned)</li> <li>Array.prototype.find() takes an array, and returns the first element that satisfies the provided condition.</li> </ul> <p>I recommend to use them as much as possible in following the principles of functional programming because they are composable, concise and elegant.</p> <p>With those four methods, you can avoid the use of for and forEach loops in most situations. When you are tempted to do a for loop, try to do it with map, filter, reduce and find composed. You might struggle to do it at first because it requires you to learn a new way of thinking, but once you've got it things get easier.</p>"},{"location":"javascript/array_methods/#sample-code","title":"Sample code","text":"<pre><code>const numbers = [0, 1, 2, 3, 4, 5, 6];\nconst doubledNumbers = numbers.map(n =&gt; n * 2); // [0, 2, 4, 6, 8, 10, 12]\nconst evenNumbers = numbers.filter(n =&gt; n % 2 === 0); // [0, 2, 4, 6]\nconst sum = numbers.reduce((prev, next) =&gt; prev + next, 0); // 21\nconst greaterThanFour = numbers.find((n) =&gt; n&gt;4); // 5\n</code></pre> <p>Compute total grade sum for students with grades 10 or above by composing map, filter and reduce:</p> <pre><code>const students = [\n{ name: \"Nick\", grade: 10 },\n{ name: \"John\", grade: 15 },\n{ name: \"Julia\", grade: 19 },\n{ name: \"Nathalie\", grade: 9 },\n];\nconst aboveTenSum = students\n.map(student =&gt; student.grade) // we map the students array to an array of their grades\n.filter(grade =&gt; grade &gt;= 10) // we filter the grades array to keep those 10 or above\n.reduce((prev, next) =&gt; prev + next, 0); // we sum all the grades 10 or above one by one\nconsole.log(aboveTenSum) // 44 -- 10 (Nick) + 15 (John) + 19 (Julia), Nathalie below 10 is ignored\n</code></pre>"},{"location":"javascript/array_methods/#explanation","title":"Explanation","text":"<p>Let's consider the following array of numbers for our examples:</p> <pre><code>const numbers = [0, 1, 2, 3, 4, 5, 6];\n</code></pre>"},{"location":"javascript/array_methods/#arrayprototypemap","title":"Array.prototype.map()","text":"<pre><code>const doubledNumbers = numbers.map(function(n) {\nreturn n * 2;\n});\nconsole.log(doubledNumbers); // [0, 2, 4, 6, 8, 10, 12]\n</code></pre> <p>What's happening here? We are using .map on the numbers array, the map is iterating on each element of the array and passes it to our function. The goal of the function is to produce and return a new value from the one passed so that map can replace it.</p> <p>Let's extract this function to make it more clear, just for this once:</p> <pre><code>const doubleN = function(n) { return n * 2; };\nconst doubledNumbers = numbers.map(doubleN);\nconsole.log(doubledNumbers); // [0, 2, 4, 6, 8, 10, 12]\n</code></pre> <p>Note : You will frequently encounter this method used in combination with arrow functions</p> <pre><code>const doubledNumbers = numbers.map(n =&gt; n * 2);\nconsole.log(doubledNumbers); // [0, 2, 4, 6, 8, 10, 12]\n</code></pre> <p><code>numbers.map(doubleN)</code> produces <code>[doubleN(0), doubleN(1), doubleN(2), doubleN(3), doubleN(4), doubleN(5), doubleN(6)]</code> which is equal to <code>[0, 2, 4, 6, 8, 10, 12]</code>.</p> <p>Note: If you do not need to return a new array and just want to do a loop that has side effects, you might just want to use a for / forEach loop instead of a map.</p>"},{"location":"javascript/array_methods/#arrayprototypefilter","title":"Array.prototype.filter()","text":"<pre><code>const evenNumbers = numbers.filter(function(n) {\nreturn n % 2 === 0; // true if \"n\" is par, false if \"n\" isn't\n});\nconsole.log(evenNumbers); // [0, 2, 4, 6]\n</code></pre> <p>Note : You will frequently encounter this method used in combination with arrow functions</p> <pre><code>const evenNumbers = numbers.filter(n =&gt; n % 2 === 0);\nconsole.log(evenNumbers); // [0, 2, 4, 6]\n</code></pre> <p>We are using .filter on the numbers array, filter is iterating on each element of the array and passes it to our function. The goal of the function is to return a boolean that will determine whether the current value will be kept or not. Filter then returns the array with only the kept values.</p>"},{"location":"javascript/array_methods/#arrayprototypereduce","title":"Array.prototype.reduce()","text":"<p>The reduce method goal is to reduce all elements of the array it iterates on into a single value. How it aggregates those elements is up to you.</p> <pre><code>const sum = numbers.reduce(\nfunction(acc, n) {\nreturn acc + n;\n},\n0 // accumulator variable value at first iteration step\n);\nconsole.log(sum) // 21\n</code></pre> <p>Note : You will frequently encounter this method used in combination with arrow functions</p> <pre><code>const sum = numbers.reduce((acc, n) =&gt; acc + n, 0);\nconsole.log(sum) // 21\n</code></pre> <p>Just like for .map and .filter methods, .reduce is applied on an array and takes a function as the first parameter.</p> <p>This time though, there are changes:</p> <ul> <li>.reduce takes two parameters</li> </ul> <p>The first parameter is a function that will be called at each iteration step.</p> <p>The second parameter is the value of the accumulator variable (acc here) at the first iteration step (read next point to understand).</p> <ul> <li>Function parameters</li> </ul> <p>The function you pass as the first parameter of .reduce takes two parameters. The first one (acc here) is the accumulator variable, whereas the second parameter (n) is the current element.</p> <p>The accumulator variable is equal to the return value of your function at the previous iteration step. At the first step of the iteration, acc is equal to the value you passed as .reduce second parameter.</p>"},{"location":"javascript/array_methods/#at-first-iteration-step","title":"At first iteration step","text":"<p><code>acc = 0</code> because we passed in 0 as the second parameter for reduce</p> <p><code>n = 0</code> first element of the number array</p> <p>Function returns acc + n --&gt; 0 + 0 --&gt; 0</p>"},{"location":"javascript/array_methods/#at-second-iteration-step","title":"At second iteration step","text":"<p><code>acc = 0</code> because it's the value the function returned at the previous iteration step</p> <p><code>n = 1</code> second element of the number array</p> <p>Function returns acc + n --&gt; 0 + 1 --&gt; 1</p>"},{"location":"javascript/array_methods/#at-third-iteration-step","title":"At third iteration step","text":"<p><code>acc = 1</code> because it's the value the function returned at the previous iteration step</p> <p><code>n = 2</code> third element of the number array</p> <p>Function returns acc + n --&gt; 1 + 2 --&gt; 3</p>"},{"location":"javascript/array_methods/#at-fourth-iteration-step","title":"At fourth iteration step","text":"<p><code>acc = 3</code> because it's the value the function returned at the previous iteration step</p> <p><code>n = 3</code> fourth element of the number array</p> <p>Function returns acc + n --&gt; 3 + 3 --&gt; 6</p>"},{"location":"javascript/array_methods/#at-last-iteration-step","title":"[...] At last iteration step","text":"<p><code>acc = 15</code> because it's the value the function returned at the previous iteration step</p> <p><code>n = 6</code> last element of the number array</p> <p>Function returns acc + n --&gt; 15 + 6 --&gt; 21</p> <p>As it is the last iteration step, .reduce returns 21.</p>"},{"location":"javascript/array_methods/#arrayprototypefind","title":"Array.prototype.find()","text":"<pre><code>const greaterThanZero = numbers.find(function(n) {\nreturn n &gt; 0; // return number just greater than 0 is present\n});\nconsole.log(greaterThanZero); // 1\n</code></pre> <p>Note : You will frequently encounter this method used in combination with arrow functions</p> <p>We are using .find on the numbers array, .find is iterating on each element of the array and passes it to our function, until the condition is met. The goal of the function is to return the element that satisfies the current testing function. The .find method executes the callback function once for each index of the array until the callback returns a truthy value.</p> <p>Note : It immediately returns the value of that element (that satisfies the condition) if found. Otherwise, returns undefined.</p>"},{"location":"javascript/array_methods/#external-resource","title":"External Resource","text":"<ul> <li>Understanding map / filter / reduce in JS</li> </ul>"},{"location":"javascript/arrow_function/","title":"Arrow function","text":"<p>The ES6 JavaScript update has introduced arrow functions, which is another way to declare and use functions. Here are the benefits they bring:</p> <ul> <li>More concise</li> <li>this is picked up from surroundings</li> <li>implicit return</li> </ul>"},{"location":"javascript/arrow_function/#sample-code","title":"Sample code","text":"<ul> <li>Concision and implicit return</li> </ul> <pre><code>function double(x) { return x * 2; } // Traditional way\nconsole.log(double(2)) // 4\n</code></pre> <pre><code>const double = x =&gt; x * 2; // Same function written as an arrow function with implicit return\nconsole.log(double(2)) // 4\n</code></pre> <ul> <li>this reference</li> </ul> <p>In an arrow function, this is equal to the this value of the enclosing execution context. Basically, with arrow functions, you don't have to do the \"that = this\" trick before calling a function inside a function anymore.</p> <pre><code>function myFunc() {\nthis.myVar = 0;\nsetTimeout(() =&gt; {\nthis.myVar++;\nconsole.log(this.myVar) // 1\n}, 0);\n}\n</code></pre>"},{"location":"javascript/arrow_function/#detailed-explanation","title":"Detailed explanation","text":""},{"location":"javascript/arrow_function/#concision","title":"Concision","text":"<p>Arrow functions are more concise than traditional functions in many ways. Let's review all the possible cases:</p> <ul> <li>Implicit VS Explicit return</li> </ul> <p>An explicit return is a function where the return keyword is used in its body.</p> <pre><code>  function double(x) {\nreturn x * 2; // this function explicitly returns x * 2, *return* keyword is used\n}\n</code></pre> <p>In the traditional way of writing functions, the return was always explicit. But with arrow functions, you can do implicit return which means that you don't need to use the keyword return to return a value.</p> <pre><code>  const double = (x) =&gt; {\nreturn x * 2; // Explicit return here\n}\n</code></pre> <p>Since this function only returns something (no instructions before the return keyword) we can do an implicit return.</p> <pre><code>  const double = (x) =&gt; x * 2; // Correct, returns x*2\n</code></pre> <p>To do so, we only need to remove the brackets and the return keyword. That's why it's called an implicit return, the return keyword is not there, but this function will indeed return <code>x * 2</code>.</p> <p>Note: If your function does not return a value (with side effects), it doesn't do an explicit nor an implicit return.</p> <p>Besides, if you want to implicitly return an object you must have parentheses around it since it will conflict with the block braces:</p> <pre><code>const getPerson = () =&gt; ({ name: \"Nick\", age: 24 })\nconsole.log(getPerson()) // { name: \"Nick\", age: 24 } -- object implicitly returned by arrow function\n</code></pre> <ul> <li>Only one argument</li> </ul> <p>If your function only takes one parameter, you can omit the parentheses around it. If we take back the above double code:</p> <pre><code>  const double = (x) =&gt; x * 2; // this arrow function only takes one parameter\n</code></pre> <p>Parentheses around the parameter can be avoided:</p> <pre><code>  const double = x =&gt; x * 2; // this arrow function only takes one parameter\n</code></pre> <ul> <li>No arguments</li> </ul> <p>When there is no argument provided to an arrow function, you need to provide parentheses, or it won't be valid syntax.</p> <pre><code>  () =&gt; { // parentheses are provided, everything is fine\nconst x = 2;\nreturn x;\n}\n</code></pre> <pre><code>  =&gt; { // No parentheses, this won't work!\nconst x = 2;\nreturn x;\n}\n</code></pre>"},{"location":"javascript/arrow_function/#this-reference","title":"this reference","text":"<p>To understand this subtlety introduced with arrow functions, you must know how this behaves in JavaScript.</p> <p>In an arrow function, this is equal to the this value of the enclosing execution context. What it means is that an arrow function doesn't create a new this, it grabs it from its surrounding instead.</p> <p>Without arrow function, if you wanted to access a variable from this in a function inside a function, you had to use the that = this or self = this trick.</p> <p>For instance, using setTimeout function inside myFunc:</p> <pre><code>function myFunc() {\nthis.myVar = 0;\nvar that = this; // that = this trick\nsetTimeout(\nfunction() { // A new *this* is created in this function scope\nthat.myVar++;\nconsole.log(that.myVar) // 1\nconsole.log(this.myVar) // undefined -- see function declaration above\n},\n0\n);\n}\n</code></pre> <p>But with arrow function, this is taken from its surrounding:</p> <pre><code>function myFunc() {\nthis.myVar = 0;\nsetTimeout(\n() =&gt; { // this taken from surrounding, meaning myFunc here\nthis.myVar++;\nconsole.log(this.myVar) // 1\n},\n0\n);\n}\n</code></pre>"},{"location":"javascript/arrow_function/#useful-resources","title":"Useful resources","text":"<ul> <li>Arrow functions introduction - WesBos</li> <li>JavaScript arrow function - MDN</li> <li>Arrow function and lexical this</li> </ul>"},{"location":"javascript/async/","title":"Async Await","text":"<p>In addition to Promises, there is a new syntax you might encounter to handle asynchronous code named async / await.</p> <p>The purpose of async/await functions is to simplify the behavior of using promises synchronously and to perform some behavior on a group of Promises. Just as Promises are similar to structured callbacks, async/await is similar to combining generators and promises. Async functions always return a Promise. (Ref: MDN)</p> <p>Note : You must understand what promises are and how they work before trying to understand async / await since they rely on it.</p> <p>Note 2: await must be used in an async function, which means that you can't use await in the top level of our code since that is not inside an async function.</p>"},{"location":"javascript/async/#sample-code","title":"Sample code","text":"<pre><code>async function getGithubUser(username) { // async keyword allows usage of await in the function and means function returns a promise\nconst response = await fetch(`https://api.github.com/users/${username}`); // Execution is paused here until the Promise returned by fetch is resolved\nreturn response.json();\n}\ngetGithubUser('mbeaudru')\n.then(user =&gt; console.log(user)) // logging user response - cannot use await syntax since this code isn't in async function\n.catch(err =&gt; console.log(err)); // if an error is thrown in our async function, we will catch it here\n</code></pre>"},{"location":"javascript/async/#explanation-with-sample-code","title":"Explanation with sample code","text":"<p>Async / Await is built on promises but they allow a more imperative style of code.</p> <p>The async operator marks a function as asynchronous and will always return a Promise. You can use the await operator in an async function to pause execution on that line until the returned Promise from the expression either resolves or rejects.</p> <pre><code>async function myFunc() {\n// we can use await operator because this function is async\nreturn \"hello world\";\n}\nmyFunc().then(msg =&gt; console.log(msg)) // \"hello world\" -- myFunc's return value is turned into a promise because of async operator\n</code></pre> <p>When the return statement of an async function is reached, the Promise is fulfilled with the value returned. If an error is thrown inside an async function, the Promise state will turn to rejected. If no value is returned from an async function, a Promise is still returned and resolves with no value when execution of the async function is complete.</p> <p>await operator is used to wait for a Promise to be fulfilled and can only be used inside an async function body. When encountered, the code execution is paused until the promise is fulfilled.</p> <p>Note : fetch is a function that returns a Promise that allows to do an AJAX request</p> <p>Let's see how we could fetch a github user with promises first:</p> <pre><code>function getGithubUser(username) {\nreturn fetch(`https://api.github.com/users/${username}`).then(response =&gt; response.json());\n}\ngetGithubUser('mbeaudru')\n.then(user =&gt; console.log(user))\n.catch(err =&gt; console.log(err));\n</code></pre> <p>Here's the async / await equivalent:</p> <pre><code>async function getGithubUser(username) { // promise + await keyword usage allowed\nconst response = await fetch(`https://api.github.com/users/${username}`); // Execution stops here until fetch promise is fulfilled\nreturn response.json();\n}\ngetGithubUser('mbeaudru')\n.then(user =&gt; console.log(user))\n.catch(err =&gt; console.log(err));\n</code></pre> <p>async / await syntax is particularly convenient when you need to chain promises that are interdependent.</p> <p>For instance, if you need to get a token in order to be able to fetch a blog post on a database and then the author informations:</p> <p>Note : await expressions needs to be wrapped in parentheses to call its resolved value's methods and properties on the same line.</p> <pre><code>async function fetchPostById(postId) {\nconst token = (await fetch('token_url')).json().token;\nconst post = (await fetch(`/posts/${postId}?token=${token}`)).json();\nconst author = (await fetch(`/users/${post.authorId}`)).json();\npost.author = author;\nreturn post;\n}\nfetchPostById('gzIrzeo64')\n.then(post =&gt; console.log(post))\n.catch(err =&gt; console.log(err));\n</code></pre>"},{"location":"javascript/async/#error-handling","title":"Error handling","text":"<p>Unless we add try / catch blocks around await expressions, uncaught exceptions \u2013 regardless of whether they were thrown in the body of your async function or while it\u2019s suspended during await \u2013 will reject the promise returned by the async function. Using the <code>throw</code> statement in an async function is the same as returning a Promise that rejects. (Ref: PonyFoo).</p> <p>Note : Promises behave the same!</p> <p>With promises, here is how you would handle the error chain:</p> <pre><code>function getUser() { // This promise will be rejected!\nreturn new Promise((res, rej) =&gt; rej(\"User not found !\"));\n}\nfunction getAvatarByUsername(userId) {\nreturn getUser(userId).then(user =&gt; user.avatar);\n}\nfunction getUserAvatar(username) {\nreturn getAvatarByUsername(username).then(avatar =&gt; ({ username, avatar }));\n}\ngetUserAvatar('mbeaudru')\n.then(res =&gt; console.log(res))\n.catch(err =&gt; console.log(err)); // \"User not found !\"\n</code></pre> <p>The equivalent with async / await:</p> <pre><code>async function getUser() { // The returned promise will be rejected!\nthrow \"User not found !\";\n}\nasync function getAvatarByUsername(userId) =&gt; {\nconst user = await getUser(userId);\nreturn user.avatar;\n}\nasync function getUserAvatar(username) {\nvar avatar = await getAvatarByUsername(username);\nreturn { username, avatar };\n}\ngetUserAvatar('mbeaudru')\n.then(res =&gt; console.log(res))\n.catch(err =&gt; console.log(err)); // \"User not found !\"\n</code></pre>"},{"location":"javascript/async/#external-resources","title":"External resources","text":"<ul> <li>Async/Await - JavaScript.Info</li> <li>ES7 Async/Await</li> <li>6 Reasons Why JavaScript\u2019s Async/Await Blows Promises Away</li> <li>JavaScript awaits</li> <li>Using Async Await in Express with Node 8</li> <li>Async Function</li> <li>Await</li> <li>Using async / await in express with node 8</li> </ul>"},{"location":"javascript/class/","title":"Class","text":"<p>JavaScript is a prototype-based language (whereas Java is class-based language, for instance). ES6 has introduced JavaScript classes which are meant to be a syntactic sugar for prototype-based inheritance and not a new class-based inheritance model (ref).</p> <p>The word class is indeed error prone if you are familiar with classes in other languages. If you do, avoid assuming how JavaScript classes work on this basis and consider it an entirely different notion.</p> <p>Since this document is not an attempt to teach you the language from the ground up, I will assume you know what prototypes are and how they behave. If you do not, see the external resources listed below the sample code.</p>"},{"location":"javascript/class/#samples","title":"Samples","text":"<p>Before ES6, prototype syntax:</p> <pre><code>var Person = function(name, age) {\nthis.name = name;\nthis.age = age;\n}\nPerson.prototype.stringSentence = function() {\nreturn \"Hello, my name is \" + this.name + \" and I'm \" + this.age;\n}\n</code></pre> <p>With ES6 class syntax:</p> <pre><code>class Person {\nconstructor(name, age) {\nthis.name = name;\nthis.age = age;\n}\nstringSentence() {\nreturn `Hello, my name is ${this.name} and I am ${this.age}`;\n}\n}\nconst myPerson = new Person(\"Manu\", 23);\nconsole.log(myPerson.age) // 23\nconsole.log(myPerson.stringSentence()) // \"Hello, my name is Manu and I'm 23\n</code></pre>"},{"location":"javascript/class/#external-resources","title":"External resources","text":"<p>For prototype understanding:</p> <ul> <li>Understanding Prototypes in JS - Yehuda Katz</li> <li>A plain English guide to JS prototypes - Sebastian Porto</li> <li>Inheritance and the prototype chain - MDN</li> </ul> <p>For classes understanding:</p> <ul> <li>ES6 Classes in Depth - Nicolas Bevacqua</li> <li>ES6 Features - Classes</li> <li>JavaScript Classes - MDN</li> </ul>"},{"location":"javascript/closure/","title":"Closure","text":""},{"location":"javascript/closure/#functions-with-memory","title":"Functions with memory","text":"<ul> <li>When our functions get called, we create a live store of data(local memory/ variable envirronement/ state)</li> <li>When the function finishes executing, its local memory is deleted(except the returned value)</li> <li>What if we could hold on data between execution, have an associated cache/permanent memory to these functions.</li> </ul> <p>Define a function inside another function allows to do just that:  </p> <pre><code>function outer(){\nlet counter = 0;\nfunction incrementCounter(){\nif(counter&gt;0){\nreturn \"You can't run me more than once\"\n}\ncounter++;\n}\nreturn incrementCounter\n}\nconst myNewFunction = outer();\nmyNewFunction(); // undefined\nmyNewFunction(); // \"You can't run me more than once\"\n</code></pre> <p>Using this syntax, myNewFunction bring with him a \"backpack\" of data: the local memory in which he was defined. We can access the <code>counter</code> inside myNewFunction but not outside.</p> <p>However, any variable that is not referenced by the function will not be added to the backpack. This is to prevent memory leak because the <code>uselessCounter</code> variable can't be acces directly in the global scope and isn't either by <code>myNewFunction</code>. Therefore, there is no point in keeping it in memory.</p> <pre><code>function outer(){\nlet counter = 0;\nlet uselessCounter = 69;\nfunction incrementCounter(){\nif(counter&gt;0){\nreturn \"You can't run me more than once\"\n}\ncounter++;\n}\nreturn incrementCounter\n}\nconst myNewFunction = outer();\n</code></pre>"},{"location":"javascript/closure/#what-do-we-call-the-backpack","title":"What do we call the backpack","text":"<ul> <li>Closed Over Variable Environment (COVE)</li> <li>Persistent Lexical Scope Referenced Data (PLSRD)</li> <li>Closure</li> </ul>"},{"location":"javascript/closure/#individual-backpack","title":"Individual Backpack","text":"<p>if we run <code>outer</code> again and store the returned <code>incrementCounter</code> function definition in <code>anotherFunction</code>, this new function was created in a new execution context and therefore has a brand new backpack (how lucky!)</p> <p>Closure gives our functions persistent memories</p>"},{"location":"javascript/closure/#practical-applications","title":"Practical applications","text":"<ul> <li>helper function like <code>once</code> that can only be runned once (end of game logic to trigger only once,...)</li> <li>helper function like <code>memoize</code>, we keep the result of a heavy computation inside a dictionnary in the backpack (getNthPrimenumber(127) -&gt; put in the backpack so that it's not computed again next time but just looked up)</li> <li>Iterators and generators are relying on closureto work</li> </ul>"},{"location":"javascript/closure/#external-resources","title":"External resources","text":"<ul> <li>Javascript: The hard parts, v2</li> </ul>"},{"location":"javascript/destructuring/","title":"Destructuring objects and arrays","text":"<p>Destructuring is a convenient way of creating new variables by extracting some values from data stored in objects or arrays.</p> <p>To name a few use cases, destructuring can be used to destructure function parameters or this.props in React projects for instance.</p>"},{"location":"javascript/destructuring/#explanation-with-sample-code","title":"Explanation with sample code","text":"<ul> <li>Object</li> </ul> <p>Let's consider the following object for all the samples:</p> <pre><code>const person = {\nfirstName: \"Nick\",\nlastName: \"Anderson\",\nage: 35,\nsex: \"M\"\n}\n</code></pre> <p>Without destructuring</p> <pre><code>const first = person.firstName;\nconst age = person.age;\nconst city = person.city || \"Paris\";\n</code></pre> <p>With destructuring, all in one line:</p> <pre><code>const { firstName: first, age, city = \"Paris\" } = person; // That's it !\nconsole.log(age) // 35 -- A new variable age is created and is equal to person.age\nconsole.log(first) // \"Nick\" -- A new variable first is created and is equal to person.firstName\nconsole.log(firstName) // ReferenceError -- person.firstName exists BUT the new variable created is named first\nconsole.log(city) // \"Paris\" -- A new variable city is created and since person.city is undefined, city is equal to the default value provided \"Paris\".\n</code></pre> <p>Note : In <code>const { age } = person;</code>, the brackets after const keyword are not used to declare an object nor a block but is the destructuring syntax.</p> <ul> <li>Function parameters</li> </ul> <p>Destructuring is often used to destructure objects parameters in functions.</p> <p>Without destructuring</p> <pre><code>function joinFirstLastName(person) {\nconst firstName = person.firstName;\nconst lastName = person.lastName;\nreturn firstName + '-' + lastName;\n}\njoinFirstLastName(person); // \"Nick-Anderson\"\n</code></pre> <p>In destructuring the object parameter person, we get a more concise function:</p> <pre><code>function joinFirstLastName({ firstName, lastName }) { // we create firstName and lastName variables by destructuring person parameter\nreturn firstName + '-' + lastName;\n}\njoinFirstLastName(person); // \"Nick-Anderson\"\n</code></pre> <p>Destructuring is even more pleasant to use with arrow functions:</p> <pre><code>const joinFirstLastName = ({ firstName, lastName }) =&gt; firstName + '-' + lastName;\njoinFirstLastName(person); // \"Nick-Anderson\"\n</code></pre> <ul> <li>Array</li> </ul> <p>Let's consider the following array:</p> <pre><code>const myArray = [\"a\", \"b\", \"c\"];\n</code></pre> <p>Without destructuring</p> <pre><code>const x = myArray[0];\nconst y = myArray[1];\n</code></pre> <p>With destructuring</p> <pre><code>const [x, y] = myArray; // That's it !\nconsole.log(x) // \"a\"\nconsole.log(y) // \"b\"\n</code></pre>"},{"location":"javascript/destructuring/#useful-resources","title":"Useful resources","text":"<ul> <li>ES6 Features - Destructuring Assignment</li> <li>Destructuring Objects - WesBos</li> <li>ExploringJS - Destructuring</li> </ul>"},{"location":"javascript/extend_super/","title":"<code>Extends</code> and <code>super</code> keywords","text":"<p>The <code>extends</code> keyword is used in class declarations or class expressions to create a class which is a child of another class (Ref: MDN). The subclass inherits all the properties of the superclass and additionally can add new properties or modify the inherited ones.</p> <p>The <code>super</code> keyword is used to call functions on an object's parent, including its constructor.</p> <ul> <li><code>super</code> keyword must be used before the <code>this</code> keyword is used in constructor</li> <li>Invoking <code>super()</code> calls the parent class constructor. If you want to pass some arguments in a class's constructor to its parent's constructor, you call it with <code>super(arguments)</code>.</li> <li>If the parent class have a method (even static) called <code>X</code>, you can use <code>super.X()</code> to call it in a child class.</li> </ul>"},{"location":"javascript/extend_super/#sample-code","title":"Sample Code","text":"<pre><code>class Polygon {\nconstructor(height, width) {\nthis.name = 'Polygon';\nthis.height = height;\nthis.width = width;\n}\ngetHelloPhrase() {\nreturn `Hi, I am a ${this.name}`;\n}\n}\nclass Square extends Polygon {\nconstructor(length) {\n// Here, it calls the parent class' constructor with lengths\n// provided for the Polygon's width and height\nsuper(length, length);\n// Note: In derived classes, super() must be called before you\n// can use 'this'. Leaving this out will cause a reference error.\nthis.name = 'Square';\nthis.length = length;\n}\ngetCustomHelloPhrase() {\nconst polygonPhrase = super.getHelloPhrase(); // accessing parent method with super.X() syntax\nreturn `${polygonPhrase} with a length of ${this.length}`;\n}\nget area() {\nreturn this.height * this.width;\n}\n}\nconst mySquare = new Square(10);\nconsole.log(mySquare.area) // 100\nconsole.log(mySquare.getHelloPhrase()) // 'Hi, I am a Square' -- Square inherits from Polygon and has access to its methods\nconsole.log(mySquare.getCustomHelloPhrase()) // 'Hi, I am a Square with a length of 10'\n</code></pre> <p>Note : If we had tried to use <code>this</code> before calling <code>super()</code> in Square class, a ReferenceError would have been raised:</p> <pre><code>class Square extends Polygon {\nconstructor(length) {\nthis.height; // ReferenceError, super needs to be called first!\n// Here, it calls the parent class' constructor with lengths\n// provided for the Polygon's width and height\nsuper(length, length);\n// Note: In derived classes, super() must be called before you\n// can use 'this'. Leaving this out will cause a reference error.\nthis.name = 'Square';\n}\n}\n</code></pre>"},{"location":"javascript/extend_super/#external-resources","title":"External Resources","text":"<ul> <li>Extends - MDN</li> <li>Super operator - MDN</li> <li>Inheritance - MDN</li> </ul>"},{"location":"javascript/function_default/","title":"Function default parameter value","text":"<p>Starting from ES2015 JavaScript update, you can set default value to your function parameters using the following syntax:</p> <pre><code>function myFunc(x = 10) {\nreturn x;\n}\nconsole.log(myFunc()) // 10 -- no value is provided so x default value 10 is assigned to x in myFunc\nconsole.log(myFunc(5)) // 5 -- a value is provided so x is equal to 5 in myFunc\nconsole.log(myFunc(undefined)) // 10 -- undefined value is provided so default value is assigned to x\nconsole.log(myFunc(null)) // null -- a value (null) is provided, see below for more details\n</code></pre> <p>The default parameter is applied in two and only two situations:</p> <ul> <li>No parameter provided</li> <li>undefined parameter provided</li> </ul> <p>In other words, if you pass in null the default parameter won't be applied.</p> <p>Note: Default value assignment can be used with destructured parameters as well (see next notion to see an example)</p>"},{"location":"javascript/function_default/#external-resource","title":"External resource","text":"<ul> <li>Default parameter value - ES6 Features</li> <li>Default parameters - MDN</li> </ul>"},{"location":"javascript/generators/","title":"Generators","text":"<p>Another way to write the <code>downToOne</code> function is to use a Generator. To instantiate a <code>Generator</code> object, one must use the <code>function *</code> declaration. Generators are functions that can be exited and later re-entered with its context (variable bindings) saved across re-entrances.</p> <p>For example, the <code>downToOne</code> function above can be rewritten as:</p> <pre><code>function * downToOne(n) {\nfor (let i = n; i &gt; 0; --i) {\nyield i;\n}\n}\n[...downToOne(5)] // [ 5, 4, 3, 2, 1 ]\n</code></pre> <p>Generators return an iterable object. When the iterator's <code>next()</code> function is called, it is executed until the first <code>yield</code> expression, which specifies the value to be returned from the iterator or with <code>yield*</code>, which delegates to another generator function. When a <code>return</code> expression is called in the generator, it will mark the generator as done and pass back as the return value. Further calls to <code>next()</code> will not return any new values.</p> <p>Sample code</p> <pre><code>// Yield Example\nfunction * idMaker() {\nvar index = 0;\nwhile (index &lt; 2) {\nyield index;\nindex = index + 1;\n}\n}\nvar gen = idMaker();\ngen.next().value; // 0\ngen.next().value; // 1\ngen.next().value; // undefined\n</code></pre> <p>The <code>yield*</code> expression enables a generator to call another generator function during iteration.</p> <pre><code>// Yield * Example\nfunction * genB(i) {\nyield i + 1;\nyield i + 2;\nyield i + 3;\n}\nfunction * genA(i) {\nyield i;\nyield* genB(i);\nyield i + 10;\n}\nvar gen = genA(10);\ngen.next().value; // 10\ngen.next().value; // 11\ngen.next().value; // 12\ngen.next().value; // 13\ngen.next().value; // 20\n</code></pre> <pre><code>// Generator Return Example\nfunction* yieldAndReturn() {\nyield \"Y\";\nreturn \"R\";\nyield \"unreachable\";\n}\nvar gen = yieldAndReturn()\ngen.next(); // { value: \"Y\", done: false }\ngen.next(); // { value: \"R\", done: true }\ngen.next(); // { value: undefined, done: true }\n</code></pre>"},{"location":"javascript/generators/#external-resources","title":"External resources","text":"<ul> <li>Mozilla MDN Web Docs, Iterators and Generators</li> </ul>"},{"location":"javascript/import_export/","title":"Imports / Exports","text":"<p>ES6 modules are used to access variables or functions in a module explicitly exported by the modules it imports.</p> <p>I highly recommend to take a look at MDN resources on import/export (see external resources below), it is both straightforward and complete.</p>"},{"location":"javascript/import_export/#explanation-with-sample-code","title":"Explanation with sample code","text":""},{"location":"javascript/import_export/#named-exports","title":"Named exports","text":"<p>Named exports are used to export several values from a module.</p> <p>Note : You can only name-export first-class citizens that have a name.</p> <pre><code>// mathConstants.js\nexport const pi = 3.14;\nexport const exp = 2.7;\nexport const alpha = 0.35;\n// -------------\n// myFile.js\nimport { pi, exp } from './mathConstants.js'; // Named import -- destructuring-like syntax\nconsole.log(pi) // 3.14\nconsole.log(exp) // 2.7\n// -------------\n// mySecondFile.js\nimport * as constants from './mathConstants.js'; // Inject all exported values into constants variable\nconsole.log(constants.pi) // 3.14\nconsole.log(constants.exp) // 2.7\n</code></pre> <p>While named imports looks like destructuring, they have a different syntax and are not the same. They don't support default values nor deep destructuring.</p> <p>Besides, you can do aliases but the syntax is different from the one used in destructuring:</p> <pre><code>import { foo as bar } from 'myFile.js'; // foo is imported and injected into a new bar variable\n</code></pre>"},{"location":"javascript/import_export/#default-import-export","title":"Default import / export","text":"<p>Concerning the default export, there is only a single default export per module. A default export can be a function, a class, an object or anything else. This value is considered the \"main\" exported value since it will be the simplest to import. Ref: MDN</p> <pre><code>// coolNumber.js\nconst ultimateNumber = 42;\nexport default ultimateNumber;\n// ------------\n// myFile.js\nimport number from './coolNumber.js';\n// Default export, independently from its name, is automatically injected into number variable;\nconsole.log(number) // 42\n</code></pre> <p>Function exporting:</p> <pre><code>// sum.js\nexport default function sum(x, y) {\nreturn x + y;\n}\n// -------------\n// myFile.js\nimport sum from './sum.js';\nconst result = sum(1, 2);\nconsole.log(result) // 3\n</code></pre>"},{"location":"javascript/import_export/#external-resources","title":"External resources","text":"<ul> <li>ES6 Modules in bulletpoints</li> <li>Export - MDN</li> <li>Import - MDN</li> <li>Understanding ES6 Modules</li> <li>Destructuring special case - import statements</li> <li>Misunderstanding ES6 Modules - Kent C. Dodds</li> <li>Modules in JavaScript</li> </ul>"},{"location":"javascript/js_browser/","title":"JS and the Browser","text":""},{"location":"javascript/js_browser/#asynchronicity-in-javascript","title":"Asynchronicity in Javascript","text":"<p>Javascript is :</p> <ul> <li>Single threaded (one command runs at a time)</li> <li>Synchronously executing(each line is run in order the code appears)</li> </ul> <p>The core javascript engine is composed of 3 main parts:</p> <ul> <li>Thread of execution</li> <li>Memory/variable environment</li> <li>Call Stack</li> </ul> <p>To allow asynchronous behaviors, we need to add some new components:</p> <ul> <li>Web Browser APIs/Node background APIs (document, fetch, setTimeout,... )</li> <li>Promises</li> <li>Event Loop, Callback/Task queue and micro task queue</li> </ul>"},{"location":"javascript/js_browser/#web-api-rules","title":"Web API Rules","text":"<p>We need to know when the browser can add something to the main thread JS call stack. A strict set of rules needs to exist to handle these cases.</p> <p>Browser feature are added to a callback queue. They are allowed to run and be put on the call stack only when all the synchronous code in the main thread is done (The global execution context needs to be done).</p> <pre><code>function printHello(){console.log(\"Hello\")}\nfunction blockForOneSec(){\n// Block js thread for 1 sec (big for loop,...)\n}\nsetTimeout(printHello,0)\nblockForOneSec()\nconsole.log(\"Me First\")\n</code></pre> <p>This timeline for this code block would be this :</p> <ul> <li>0ms: blockForOneSec()</li> <li>1000ms: \"Me First\"</li> <li>1001ms: \"Hello\"</li> </ul> <p>The feature responsible of checking very quickly if there is anything on the call stack and in the callback queue is known as the Event Loop.</p> <p>Problem with this approach:</p> <ul> <li>Our response data is only available in the callback function (callback hell)</li> <li>a bit odd to pass a function into another function to finally be run much later if the main thread is busy</li> </ul>"},{"location":"javascript/js_browser/#microtask-queue","title":"Microtask Queue","text":"<p>Functions in the <code>onFulfillment</code> or <code>onRejection</code> array of a Promise don't go to the regular callback queue, they enter their own microtask queue.</p> <p></p> <p>In the end, the priority of execution for an asynchronous piece of javascript used in a browser is the following.</p> <ul> <li>global scope code in the call stack</li> <li>Then, the event loop add events from these queue to the call stack :</li> <li>microTask queue events (ES6 Promise based function, for example <code>.then(function)</code>)</li> <li>callback queue (ES5 javascript callback functions, for example <code>SetTimeout(function,0)</code>)</li> </ul>"},{"location":"javascript/object_ppt/","title":"Object property shorthand","text":"<p>When assigning a variable to an object property, if the variable name is equal to the property name, you can do the following:</p> <pre><code>const x = 10;\nconst myObj = { x };\nconsole.log(myObj.x) // 10\n</code></pre>"},{"location":"javascript/object_ppt/#explanation","title":"Explanation","text":"<p>Usually (pre-ES2015) when you declare a new object literal and want to use variables as object properties values, you would write this kind of code:</p> <pre><code>const x = 10;\nconst y = 20;\nconst myObj = {\nx: x, // assigning x variable value to myObj.x\ny: y // assigning y variable value to myObj.y\n};\nconsole.log(myObj.x) // 10\nconsole.log(myObj.y) // 20\n</code></pre> <p>As you can see, this is quite repetitive because the properties name of myObj are the same as the variable names you want to assign to those properties.</p> <p>With ES2015, when the variable name is the same as the property name, you can do this shorthand:</p> <pre><code>const x = 10;\nconst y = 20;\nconst myObj = {\nx,\ny\n};\nconsole.log(myObj.x) // 10\nconsole.log(myObj.y) // 20\n</code></pre>"},{"location":"javascript/object_ppt/#external-resources","title":"External resources","text":"<ul> <li>Property shorthand - ES6 Features</li> </ul>"},{"location":"javascript/promises/","title":"Promises","text":"<p>A promise is an object which can be returned synchronously from an asynchronous function (ref).</p> <p>Promises can be used to avoid callback hell, and they are more and more frequently encountered in modern JavaScript projects.</p> <p>A Promise is an object with 3 main properties <code>value</code> and 2 hidden arrays <code>onFulfillment</code> and <code>onRejection</code>. Any function in these arrays will automatically be run with value as an argument.</p> <ul> <li><code>.then</code> method is adding function to <code>onFulfillment</code>.</li> <li><code>.catch</code> method is adding function to <code>onRejection</code>.</li> </ul> <p>Depending on if we face an error or not, different function will be invoked.</p> <p>Function in the <code>onFulfillment</code> and <code>onRejection</code> array don't go in the regular callback queue, they enter their own microtask queue.</p>"},{"location":"javascript/promises/#sample-code","title":"Sample code","text":"<pre><code>const fetchingPosts = new Promise((res, rej) =&gt; {\n$.get(\"/posts\")\n.done(posts =&gt; res(posts))\n.fail(err =&gt; rej(err));\n});\nfetchingPosts\n.then(posts =&gt; console.log(posts))\n.catch(err =&gt; console.log(err));\n</code></pre>"},{"location":"javascript/promises/#explanation","title":"Explanation","text":"<p>When you do an Ajax request the response is not synchronous because you want a resource that takes some time to come. It even may never come if the resource you have requested is unavailable for some reason (404).</p> <p>To handle that kind of situation, ES2015 has given us promises. Promises can have three different states:</p> <ul> <li>Pending</li> <li>Fulfilled</li> <li>Rejected</li> </ul> <p>Let's say we want to use promises to handle an Ajax request to fetch the resource X.</p>"},{"location":"javascript/promises/#create-the-promise","title":"Create the promise","text":"<p>We firstly are going to create a promise. We will use the jQuery get method to do our Ajax request to X.</p> <pre><code>const xFetcherPromise = new Promise( // Create promise using \"new\" keyword and store it into a variable\nfunction(resolve, reject) { // Promise constructor takes a function parameter which has resolve and reject parameters itself\n$.get(\"X\") // Launch the Ajax request\n.done(function(X) { // Once the request is done...\nresolve(X); // ... resolve the promise with the X value as parameter\n})\n.fail(function(error) { // If the request has failed...\nreject(error); // ... reject the promise with the error as parameter\n});\n}\n)\n</code></pre> <p>As seen in the above sample, the Promise object takes an executor function which takes two parameters resolve and reject. Those parameters are functions which when called are going to move the promise pending state to respectively a fulfilled and rejected state.</p> <p>The promise is in pending state after instance creation and its executor function is executed immediately. Once one of the function resolve or reject is called in the executor function, the promise will call its associated handlers.</p>"},{"location":"javascript/promises/#promise-handlers-usage","title":"Promise handlers usage","text":"<p>To get the promise result (or error), we must attach to it handlers by doing the following:</p> <pre><code>xFetcherPromise\n.then(function(X) {\nconsole.log(X);\n})\n.catch(function(err) {\nconsole.log(err)\n})\n</code></pre> <p>If the promise succeeds, resolve is executed and the function passed as <code>.then</code> parameter is executed.</p> <p>If it fails, reject is executed and the function passed as <code>.catch</code> parameter is executed.</p> <p>Note : If the promise has already been fulfilled or rejected when a corresponding handler is attached, the handler will be called, so there is no race condition between an asynchronous operation completing and its handlers being attached. (Ref: MDN)</p>"},{"location":"javascript/promises/#external-resources","title":"External Resources","text":"<ul> <li>JavaScript Promises for dummies - Jecelyn Yeen</li> <li>JavaScript Promise API - David Walsh</li> <li>Using promises - MDN</li> <li>What is a promise - Eric Elliott</li> <li>JavaScript Promises: an Introduction - Jake Archibald</li> <li>Promise documentation - MDN</li> </ul>"},{"location":"javascript/regex/","title":"Spread operator \"...\"","text":"<p>Regex expressions are a tool used to match specific string sequence in long string</p>"},{"location":"javascript/regex/#methods","title":"Methods","text":"Test <pre><code>/regex/.test('string'); // Return true or false\n</code></pre> Match <pre><code>'string'.match(/regex/); // Return a list of matching strings\n</code></pre> Replace <pre><code>'string'.replace(/regex/, 'replaceString'); // Return a list of matching strings\n</code></pre> Important <p>You can also access capture groups in the replacement string with dollar signs ($). <pre><code>    \"Code Camp\".replace(/(\\w+)\\s(\\w+)/, '$2 $1')\n</code></pre></p>"},{"location":"javascript/regex/#operators","title":"Operators","text":"Method Description <code>/platypus/</code> Match the exact string <code>/yes|no/</code> Match 'yes' or 'no' strings <code>/freecodecamp/i</code> Case insensitive <code>/repeat/g</code> Several matching patterns <code>/.hu/</code> Ends with <code>hu</code> <code>/h+/</code> One or more <code>h</code> <code>/go*/</code> Zero or more <code>o</code> after a <code>g</code> <code>/[aiu]/</code> <code>a</code>, <code>i</code> or <code>u</code> <code>/[a-e]/</code> Between <code>a</code> and <code>e</code> <code>/[0-9]/</code> Between <code>0</code> and <code>9</code> <code>/[^aeiou]/</code> No vowels <code>/&lt;.*?&gt;/</code> Lazy match instead of default greedy <code>/^Cal/</code> Sequence starts with <code>Cal</code> <code>/Cal$/</code> Sequence ends with <code>Cal</code> <code>/\\w/</code> = <code>/[A-Za-z0-9_]/</code> Any letter/number/underscore <code>/\\W/</code> = <code>/[^A-Za-z0-9_]/</code> No letter/number/underscore <code>/\\d/</code> = <code>/[0-9]/</code> Any digit <code>/\\D/</code> = <code>/[^0-9]/</code> No digit <code>/\\s/</code> = <code>/[ \\r\\t\\f\\n\\v]/</code> Any Whitespace (CR, tab, NL, space) <code>/\\S/</code> = <code>/[^ \\r\\t\\f\\n\\v]/</code> No Whitespace (CR, tab, NL, space) <code>/a{3,5}/</code> 3 to 5 <code>a</code> <code>/a{3,}/</code> 3 or more <code>a</code> <code>/a{3}/</code> Exactly 3 <code>a</code> <code>/colou?r/</code> Check for 0 or 1 <code>u</code> in <code>color</code> <code>(?=\\w)(?!u)</code> Any letter but <code>u</code> <code>/P(engu|umpk)in/</code> <code>Penguin</code> or <code>Pumpkin</code> <code>/(\\w+)(\\s)\\1\\2\\1/</code> Any word occuring 3 times with spaces"},{"location":"javascript/spread_operator/","title":"Spread operator \"...\"","text":"<p>The spread operator <code>...</code> has been introduced with ES2015 and is used to expand elements of an iterable (like an array) into places where multiple elements can fit.</p>"},{"location":"javascript/spread_operator/#sample-code","title":"Sample code","text":"<pre><code>const arr1 = [\"a\", \"b\", \"c\"];\nconst arr2 = [...arr1, \"d\", \"e\", \"f\"]; // [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n</code></pre> <pre><code>function myFunc(x, y, ...params) {\nconsole.log(x);\nconsole.log(y);\nconsole.log(params)\n}\nmyFunc(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")\n// \"a\"\n// \"b\"\n// [\"c\", \"d\", \"e\", \"f\"]\n</code></pre> <pre><code>const { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 };\nconsole.log(x); // 1\nconsole.log(y); // 2\nconsole.log(z); // { a: 3, b: 4 }\nconst n = { x, y, ...z };\nconsole.log(n); // { x: 1, y: 2, a: 3, b: 4 }\n</code></pre>"},{"location":"javascript/spread_operator/#explanation","title":"Explanation","text":""},{"location":"javascript/spread_operator/#in-iterables-like-arrays","title":"In iterables (like arrays)","text":"<p>If we have the two following arrays:</p> <pre><code>const arr1 = [\"a\", \"b\", \"c\"];\nconst arr2 = [arr1, \"d\", \"e\", \"f\"]; // [[\"a\", \"b\", \"c\"], \"d\", \"e\", \"f\"]\n</code></pre> <p>arr2 the first element is an array because arr1 is injected as is into arr2. But what we want is arr2 to be an array of letters. To do so, we can spread the elements of arr1 into arr2.</p> <p>With spread operator</p> <pre><code>const arr1 = [\"a\", \"b\", \"c\"];\nconst arr2 = [...arr1, \"d\", \"e\", \"f\"]; // [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n</code></pre>"},{"location":"javascript/spread_operator/#function-rest-parameter","title":"Function rest parameter","text":"<p>In function parameters, we can use the rest operator to inject parameters into an array we can loop in. There is already an arguments object bound to every function that is equal to an array of all the parameters passed into the function.</p> <pre><code>function myFunc() {\nfor (var i = 0; i &lt; arguments.length; i++) {\nconsole.log(arguments[i]);\n}\n}\nmyFunc(\"Nick\", \"Anderson\", 10, 12, 6);\n// \"Nick\"\n// \"Anderson\"\n// 10\n// 12\n// 6\n</code></pre> <p>But let's say that we want this function to create a new student with its grades and with its average grade. Wouldn't it be more convenient to extract the first two parameters into two separate variables, and then have all the grades in an array we can iterate over?</p> <p>That's exactly what the rest operator allows us to do!</p> <pre><code>function createStudent(firstName, lastName, ...grades) {\n// firstName = \"Nick\"\n// lastName = \"Anderson\"\n// [10, 12, 6] -- \"...\" takes all other parameters passed and creates a \"grades\" array variable that contains them\nconst avgGrade = grades.reduce((acc, curr) =&gt; acc + curr, 0) / grades.length; // computes average grade from grades\nreturn {\nfirstName: firstName,\nlastName: lastName,\ngrades: grades,\navgGrade: avgGrade\n}\n}\nconst student = createStudent(\"Nick\", \"Anderson\", 10, 12, 6);\nconsole.log(student);\n// {\n//   firstName: \"Nick\",\n//   lastName: \"Anderson\",\n//   grades: [10, 12, 6],\n//   avgGrade: 9,33\n// }\n</code></pre> <p>Note: createStudent function is bad because we don't check if grades.length exists or is different from 0. But it's easier to read this way, so I didn't handle this case.</p>"},{"location":"javascript/spread_operator/#object-properties-spreading","title":"Object properties spreading","text":"<p>For this one, I recommend you read previous explanations about the rest operator on iterables and function parameters.</p> <pre><code>const myObj = { x: 1, y: 2, a: 3, b: 4 };\nconst { x, y, ...z } = myObj; // object destructuring here\nconsole.log(x); // 1\nconsole.log(y); // 2\nconsole.log(z); // { a: 3, b: 4 }\n// z is the rest of the object destructured: myObj object minus x and y properties destructured\nconst n = { x, y, ...z };\nconsole.log(n); // { x: 1, y: 2, a: 3, b: 4 }\n// Here z object properties are spread into n\n</code></pre>"},{"location":"javascript/spread_operator/#external-resources","title":"External resources","text":"<ul> <li>TC39 - Object rest/spread</li> <li>Spread operator introduction - WesBos</li> <li>JavaScript &amp; the spread operator</li> <li>6 Great uses of the spread operator</li> </ul>"},{"location":"javascript/static_method/","title":"Static Methods","text":""},{"location":"javascript/static_method/#short-explanation","title":"Short explanation","text":"<p>The <code>static</code> keyword is used in classes to declare static methods. Static methods are functions in a class that belongs to the class object and are not available to any instance of that class.</p>"},{"location":"javascript/static_method/#sample-code","title":"Sample code","text":"<pre><code>class Repo {\nstatic getName() {\nreturn \"Repo name is modern-js-cheatsheet\"\n}\n}\n// Note that we did not have to create an instance of the Repo class\nconsole.log(Repo.getName()) // Repo name is modern-js-cheatsheet\nlet r = new Repo();\nconsole.log(r.getName()) // Uncaught TypeError: r.getName is not a function\n</code></pre>"},{"location":"javascript/static_method/#detailed-explanation","title":"Detailed explanation","text":"<p>Static methods can be called within another static method by using the <code>this</code> keyword, this doesn't work for non-static methods though. Non-static methods cannot directly access static methods using the <code>this</code> keyword.</p>"},{"location":"javascript/static_method/#calling-other-static-methods-from-a-static-method","title":"Calling other static methods from a static method.","text":"<p>To call a static method from another static method, the <code>this</code> keyword can be used like so;</p> <pre><code>class Repo {\nstatic getName() {\nreturn \"Repo name is modern-js-cheatsheet\"\n}\nstatic modifyName() {\nreturn this.getName() + '-added-this'\n}\n}\nconsole.log(Repo.modifyName()) // Repo name is modern-js-cheatsheet-added-this\n</code></pre>"},{"location":"javascript/static_method/#calling-static-methods-from-non-static-methods","title":"Calling static methods from non-static methods.","text":"<p>Non-static methods can call static methods in 2 ways; 1. #### Using the class name.</p> <p>To get access to a static method from a non-static method we use the class name and call the static method like a property. e.g <code>ClassName.StaticMethodName</code></p> <pre><code>class Repo {\nstatic getName() {\nreturn \"Repo name is modern-js-cheatsheet\"\n}\nuseName() {\nreturn Repo.getName() + ' and it contains some really important stuff'\n}\n}\n// we need to instantiate the class to use non-static methods\nlet r = new Repo()\nconsole.log(r.useName()) // Repo name is modern-js-cheatsheet and it contains some really important stuff\n</code></pre> <p>Static methods can be called as properties on the constructor object.</p> <pre><code>class Repo {\nstatic getName() {\nreturn \"Repo name is modern-js-cheatsheet\"\n}\nuseName() {\n// Calls the static method as a property of the constructor\nreturn this.constructor.getName() + ' and it contains some really important stuff'\n}\n}\n// we need to instantiate the class to use non-static methods\nlet r = new Repo()\nconsole.log(r.useName()) // Repo name is modern-js-cheatsheet and it contains some really important stuff\n</code></pre>"},{"location":"javascript/static_method/#using-the-constructor","title":"Using the constructor","text":""},{"location":"javascript/static_method/#external-resources","title":"External resources","text":"<ul> <li>static keyword- MDN</li> <li>Static Methods- Javascript.info</li> <li>Static Members in ES6- OdeToCode</li> </ul>"},{"location":"javascript/template_literals/","title":"Template literals","text":"<p>Template literals is an expression interpolation for single and multiple-line strings.</p> <p>In other words, it is a new string syntax in which you can conveniently use any JavaScript expressions (variables for instance).</p>"},{"location":"javascript/template_literals/#sample-code","title":"Sample code","text":"<pre><code>const name = \"Nick\";\n`Hello ${name}, the following expression is equal to four : ${2+2}`;\n// Hello Nick, the following expression is equal to four: 4\n</code></pre>"},{"location":"javascript/template_literals/#external-resources","title":"External resources","text":"<ul> <li>String interpolation - ES6 Features</li> <li>ES6 Template Strings - Addy Osmani</li> </ul>"},{"location":"javascript/template_literals/#tagged-template-literals","title":"Tagged template literals","text":"<p>Template tags are functions that can be prefixed to a template literal. When a function is called this way, the first parameter is an array of the strings that appear between the template's interpolated variables, and the subsequent parameters are the interpolated values. Use a spread operator <code>...</code> to capture all of them. (Ref: MDN).</p> <p>Note : A famous library named styled-components heavily relies on this feature.</p> <p>Below is a toy example on how they work. <pre><code>function highlight(strings, ...values) {\nconst interpolation = strings.reduce((prev, current) =&gt; {\nreturn prev + current + (values.length ? \"&lt;mark&gt;\" + values.shift() + \"&lt;/mark&gt;\" : \"\");\n}, \"\");\nreturn interpolation;\n}\nconst condiment = \"jam\";\nconst meal = \"toast\";\nhighlight`I like ${condiment} on ${meal}.`;\n// \"I like &lt;mark&gt;jam&lt;/mark&gt; on &lt;mark&gt;toast&lt;/mark&gt;.\"\n</code></pre></p> <p>A more interesting example: <pre><code>function comma(strings, ...values) {\nreturn strings.reduce((prev, next) =&gt; {\nlet value = values.shift() || [];\nvalue = value.join(\", \");\nreturn prev + next + value;\n}, \"\");\n}\nconst snacks = ['apples', 'bananas', 'cherries'];\ncomma`I like ${snacks} to snack on.`;\n// \"I like apples, bananas, cherries to snack on.\"\n</code></pre></p>"},{"location":"javascript/template_literals/#external-resources-2","title":"External resources 2","text":"<ul> <li>Wes Bos on Tagged Template Literals</li> <li>Library of common template tags</li> </ul>"},{"location":"javascript/this/","title":"JavaScript this","text":"<p>this operator behaves differently than in other languages and is in most cases determined by how a function is called. (Ref: MDN).</p> <p>This notion is having many subtleties and being quite hard, I highly suggest you to deep dive in the external resources below. Thus, I will provide what I personally have in mind to determine what this is equal to. I have learned this tip from this article written by Yehuda Katz.</p> <pre><code>function myFunc() {\n...\n}\n// After each statement, you find the value of *this* in myFunc\nmyFunc.call(\"myString\", \"hello\") // \"myString\" -- first .call parameter value is injected into *this*\n// In non-strict-mode\nmyFunc(\"hello\") // window -- myFunc() is syntax sugar for myFunc.call(window, \"hello\")\n// In strict-mode\nmyFunc(\"hello\") // undefined -- myFunc() is syntax sugar for myFunc.call(undefined, \"hello\")\n</code></pre> <pre><code>var person = {\nmyFunc: function() { ... }\n}\nperson.myFunc.call(person, \"test\") // person Object -- first call parameter is injected into *this*\nperson.myFunc(\"test\") // person Object -- person.myFunc() is syntax sugar for person.myFunc.call(person, \"test\")\nvar myBoundFunc = person.myFunc.bind(\"hello\") // Creates a new function in which we inject \"hello\" in *this* value\nperson.myFunc(\"test\") // person Object -- The bind method has no effect on the original method\nmyBoundFunc(\"test\") // \"hello\" -- myBoundFunc is person.myFunc with \"hello\" bound to *this*\n</code></pre>"},{"location":"javascript/this/#external-resources","title":"External resources","text":"<ul> <li>Understanding JavaScript Function Invocation and \"this\" - Yehuda Katz</li> <li>JavaScript this - MDN</li> </ul>"},{"location":"javascript/truthy/","title":"Truthy / Falsy","text":"<p>In JavaScript, a truthy or falsy value is a value that is being casted into a boolean when evaluated in a boolean context. An example of boolean context would be the evaluation of an <code>if</code> condition:</p> <p>Every value will be casted to <code>true</code> unless they are equal to:</p> <ul> <li><code>false</code></li> <li><code>0</code></li> <li><code>\"\"</code> (empty string)</li> <li><code>null</code></li> <li><code>undefined</code></li> <li><code>NaN</code></li> </ul> <p>Here are examples of boolean context:</p> <ul> <li><code>if</code> condition evaluation</li> </ul> <pre><code>if (myVar) {}\n</code></pre> <p><code>myVar</code> can be any first-class citizen (variable, function, boolean) but it will be casted into a boolean because it's evaluated in a boolean context.</p> <ul> <li>After logical NOT <code>!</code> operator</li> </ul> <p>This operator returns false if its single operand can be converted to true; otherwise, returns true.</p> <pre><code>!0 // true -- 0 is falsy so it returns true\n!!0 // false -- 0 is falsy so !0 returns true so !(!0) returns false\n!!\"\" // false -- empty string is falsy so NOT (NOT false) equals false\n</code></pre> <ul> <li>With the Boolean object constructor</li> </ul> <pre><code>new Boolean(0) // false\nnew Boolean(1) // true\n</code></pre> <ul> <li>In a ternary evaluation</li> </ul> <pre><code>myVar ? \"truthy\" : \"falsy\"\n</code></pre> <p>myVar is evaluated in a boolean context.</p> <p>Be careful when comparing 2 values. The object values (that should be cast to true) is not being casted to Boolean but it forced to convert into a primitive value one using ToPrimitives specification. Internally, when an object is compared to Boolean value like <code>[] == true</code>, it does <code>[].toString() == true</code> so...</p> <pre><code>let a = [] == true // a is false since [].toString() give \"\" back.\nlet b = [1] == true // b is true since [1].toString() give \"1\" back.\nlet c = [2] == true // c is false since [2].toString() give \"2\" back.\n</code></pre>"},{"location":"javascript/truthy/#external-resources","title":"External resources","text":"<ul> <li>Truthy (MDN)</li> <li>Falsy (MDN)</li> <li>Truthy and Falsy values in JS - Josh Clanton</li> </ul>"},{"location":"javascript/variable_decl/","title":"Variable declaration: var, const, let","text":"<p>In JavaScript, there are three keywords available to declare a variable, and each has its differences. Those are <code>var</code>, <code>let</code> and <code>const</code>.</p>"},{"location":"javascript/variable_decl/#short-explanation","title":"Short explanation","text":"<p>Variables declared with <code>const</code> keyword can't be reassigned, while <code>let</code> and <code>var</code> can.</p> <p>I recommend always declaring your variables with <code>const</code> by default, but with <code>let</code> if it is a variable that you need to mutate or reassign later.</p> Scope Reassignable Mutable Temporal Dead Zone const Block No Yes Yes let Block Yes Yes Yes var Function Yes Yes No"},{"location":"javascript/variable_decl/#sample-code","title":"Sample code","text":"<pre><code>const person = \"Nick\";\nperson = \"John\" // Will raise an error, person can't be reassigned\n</code></pre> <pre><code>let person = \"Nick\";\nperson = \"John\";\nconsole.log(person) // \"John\", reassignment is allowed with let\n</code></pre>"},{"location":"javascript/variable_decl/#detailed-explanation","title":"Detailed explanation","text":"<p>The scope of a variable roughly means \"where is this variable available in the code\".</p>"},{"location":"javascript/variable_decl/#var","title":"var","text":"<p><code>var</code> declared variables are function scoped, meaning that when a variable is created in a function, everything in that function can access that variable. Besides, a function scoped variable created in a function can't be accessed outside this function.</p> <p>I recommend you to picture it as if an X scoped variable meant that this variable was a property of X.</p> <pre><code>function myFunction() {\nvar myVar = \"Nick\";\nconsole.log(myVar); // \"Nick\" - myVar is accessible inside the function\n}\nconsole.log(myVar); // Throws a ReferenceError, myVar is not accessible outside the function.\n</code></pre> <p>Still focusing on the variable scope, here is a more subtle example:</p> <pre><code>function myFunction() {\nvar myVar = \"Nick\";\nif (true) {\nvar myVar = \"John\";\nconsole.log(myVar); // \"John\"\n// actually, myVar being function scoped, we just erased the previous myVar value \"Nick\" for \"John\"\n}\nconsole.log(myVar); // \"John\" - see how the instructions in the if block affected this value\n}\nconsole.log(myVar); // Throws a ReferenceError, myVar is not accessible outside the function.\n</code></pre> <p>Besides, var declared variables are moved to the top of the scope at execution. This is what we call var hoisting.</p> <p>This portion of code:</p> <pre><code>console.log(myVar) // undefined -- no error raised\nvar myVar = 2;\n</code></pre> <p>is understood at execution like:</p> <pre><code>var myVar;\nconsole.log(myVar) // undefined -- no error raised\nmyVar = 2;\n</code></pre>"},{"location":"javascript/variable_decl/#let","title":"let","text":"<p><code>var</code> and <code>let</code> are about the same, but <code>let</code> declared variables</p> <ul> <li>are block scoped</li> <li>are not accessible before they are assigned</li> <li>can't be re-declared in the same scope</li> </ul> <p>Let's see the impact of block-scoping taking our previous example:</p> <pre><code>function myFunction() {\nlet myVar = \"Nick\";\nif (true) {\nlet myVar = \"John\";\nconsole.log(myVar); // \"John\"\n// actually, myVar being block scoped, we just created a new variable myVar.\n// this variable is not accessible outside this block and totally independent\n// from the first myVar created !\n}\nconsole.log(myVar); // \"Nick\", see how the instructions in the if block DID NOT affect this value\n}\nconsole.log(myVar); // Throws a ReferenceError, myVar is not accessible outside the function.\n</code></pre> <p> Now, what it means for let (and const) variables for not being accessible before being assigned:</p> <pre><code>console.log(myVar) // raises a ReferenceError !\nlet myVar = 2;\n</code></pre> <p>By contrast with var variables, if you try to read or write on a let or const variable before they are assigned an error will be raised. This phenomenon is often called Temporal dead zone or TDZ.</p> <p>Note: Technically, let and const variables declarations are being hoisted too, but not their assignation. Since they're made so that they can't be used before assignation, it intuitively feels like there is no hoisting, but there is. Find out more on this very detailed explanation here if you want to know more.</p> <p>In addition, you can't re-declare a let variable:</p> <pre><code>let myVar = 2;\nlet myVar = 3; // Raises a SyntaxError\n</code></pre>"},{"location":"javascript/variable_decl/#const","title":"const","text":"<p><code>const</code> declared variables behave like let variables, but also they can't be reassigned.</p> <p>To sum it up, const variables:</p> <ul> <li>are block scoped</li> <li>are not accessible before being assigned</li> <li>can't be re-declared in the same scope</li> <li>can't be reassigned</li> </ul> <pre><code>const myVar = \"Nick\";\nmyVar = \"John\" // raises an error, reassignment is not allowed\n</code></pre> <pre><code>const myVar = \"Nick\";\nconst myVar = \"John\" // raises an error, re-declaration is not allowed\n</code></pre> <p> But there is a subtlety : <code>const</code> variables are not immutable ! Concretely, it means that object and array <code>const</code> declared variables can be mutated.</p> <p>For objects: <pre><code>const person = {\nname: 'Nick'\n};\nperson.name = 'John' // this will work ! person variable is not completely reassigned, but mutated\nconsole.log(person.name) // \"John\"\nperson = \"Sandra\" // raises an error, because reassignment is not allowed with const declared variables\n</code></pre></p> <p>For arrays: <pre><code>const person = [];\nperson.push('John'); // this will work ! person variable is not completely reassigned, but mutated\nconsole.log(person[0]) // \"John\"\nperson = [\"Nick\"] // raises an error, because reassignment is not allowed with const declared variables\n</code></pre></p>"},{"location":"javascript/variable_decl/#external-resource","title":"External resource","text":"<ul> <li>How let and const are scoped in JavaScript - WesBos</li> <li>Temporal Dead Zone (TDZ) Demystified</li> </ul>"},{"location":"python/Q%26A/","title":"Python - Q&amp;A","text":""},{"location":"python/Q%26A/#sets","title":"Sets","text":"<ul> <li> <p> Find if a set is a subset of another</p> <pre><code>&gt;&gt;&gt; {1, 2}.issubset([1, 2, 3, 4])\nTrue\n</code></pre> <p>issubset accept any iterable as an argument.</p> </li> <li> <p> Find differences between sets</p> <p>Subtraction between sets can achieve that</p> <pre><code>a = {1, 2, 6}\nb = {1, 2, 3}\n&gt;&gt;&gt; a - b\n{6}\n&gt;&gt;&gt; b - a\n{3}\n</code></pre> </li> </ul>"},{"location":"python/python/","title":"Python","text":""},{"location":"python/python/#random","title":"RANDOM","text":"<ul> <li>modulo : %</li> <li>checktype : type(var)</li> <li>lower_copy = \"text\".lower()</li> <li>dir(\"stuff\") : Returns list available methods</li> <li>\"banana\".find(\"na\") : Position premiere apparition #2</li> <li>\"banana\".replace(\"na\",\"OK\") : # \"baOKOK\"</li> <li> <p>\"banana\".strip() : remove leading and trailling characters So, to recap let\u2019s try and break the difference between is and == down to two short definitions:</p> </li> <li> <p>An is expression evaluates to True if two variables point to the same (identical) object.</p> </li> <li>An == expression evaluates to True if the objects referred to by the variables are equal (have the same contents).</li> <li>dict.get(key,0) : Get key value, put 0 as feault if does not exists</li> <li>dict.keys()  : Returns random order list of keys</li> <li>dict.values() : Returns random order(but same as keys() !) list of values</li> <li>dict.items() : Returns list of (Keys,Values) tuples</li> <li>for a,b in list.items(): print (a,b) : Iterate on both ! </li> <li>a = sorted(list,reverse=True) : Descending sorted list </li> <li>ord('n') : Gives the ordinal number used for sorting string (ASCII characters) tuple are more efficient than list, use it for temporary variables</li> </ul>"},{"location":"python/python/#regular-expression","title":"Regular expression","text":"<p>Python Regular Expression Quick Guide import re  <pre><code>^        Matches the beginning of a line\n$        Matches the end of the line\n.        Matches any character\n\\s       Matches whitespace\n\\S       Matches any non-whitespace character\n*        Repeats a character zero or more times\n*?       Repeats a character zero or more times \n         (non-greedy)\n+        Repeats a character one or more times\n+?       Repeats a character one or more times \n         (non-greedy)\n[aeiou]  Matches a single character in the listed set\n[^XYZ]   Matches a single character not in the listed set\n[a-z0-9] The set of characters can include a range\n(        Indicates where string extraction is to start\n)        Indicates where string extraction is to end\n</code></pre> re.findall() : return list of string matching expression</p> <p>greedy matching takes the longer add a ? to remove the greedy behaviour</p> <p>Python library for TCP sockets : sockets Python library for simplified requests: urllib</p>"},{"location":"python/python/#web-scraping","title":"Web scraping","text":"<p>Beautiful Soup Know if it is allowed with /reobots.txt file on websites (Ex : wikipedia.org/robots.txt)</p>"},{"location":"python/python/#wire-protocol","title":"Wire protocol","text":"<p>XML or JSON : Format not specific to language to send info from one to another</p>"},{"location":"python/python/#xml","title":"XML","text":"<pre><code>Start tag : &lt;person&gt; (can have any name)\nClosing tag : &lt;/person&gt; (can have any name)\nText content : &lt;name&gt;Thibaut&lt;/name&gt;\nAttribute : type=\"int\" (key='value' pair)\nSelf closing tag : &lt;name hide='true'/&gt;\n</code></pre> <p>with python xml.etree.ElementTree as ET data = \"\"\" Chuck  \"\"\" tree.find('name').text : Return text inside name Tag tree.find('email').get('hide') : return hide attribute value from email Tag</p>"},{"location":"python/python/#xml-schema-xsd-by-w3c","title":"XML schema (XSD by W3C)","text":"<p>used to validate a XML file is correct.</p>"},{"location":"python/python/#json","title":"JSON","text":"<p>import json</p> <p>Same as dict for python</p>"},{"location":"python/python/#web-services","title":"Web services","text":"<p>API : Application Program Interface Oauth : Key to identifie a specific user (Usefyull for rate limiting etc)</p>"},{"location":"python/python/#object-programming","title":"Object programming","text":"<p>Inheritance</p>"},{"location":"python/python/#relational-database","title":"Relational Database","text":"<ul> <li>Use integers for keys !</li> <li>Do not replicate data !</li> <li>Add id colum to every table !</li> </ul>"},{"location":"python/python/#foreign-keys","title":"Foreign Keys","text":"<ul> <li>Primary Key : Generally an integer auto-increment field</li> <li>Logical Key : What the outside world uses for lookup</li> <li>Foreign key : Generally an integer key pointing to a row in another table</li> </ul> <p>Best practices :  * Never uses your logical key as the primary key * relationships absed on integers are more efficient</p>"},{"location":"python/python/#many-to-many","title":"Many-to-many","text":"<p>Connection table with 2 foreign keys Use PRIMARY KEY (user_id,course_id) to make sure it's unique and optimize DB.</p>"},{"location":"python/python/#indexes","title":"Indexes","text":"<p>Used to improve access performance for things like string fields</p>"},{"location":"vscode/vscode/","title":"Extensions","text":""},{"location":"vscode/vscode/#general","title":"General","text":""},{"location":"vscode/vscode/#material-icon-theme","title":"Material Icon Theme","text":"<p>Simple extension adding a bunch of icons based on file names :</p> <p>Material Icon Theme\u00a0 </p> Material Icons <p></p>"},{"location":"vscode/vscode/#path-auto-complete","title":"Path Auto-complete","text":"<p>Provides path completion for visual studio code.</p> <p>Path Auto-complete\u00a0 </p>"},{"location":"vscode/vscode/#better-comments","title":"Better Comments","text":"<p>Improve your code commenting by annotating with alert, informational, TODOs, and more!</p> <p>Better Comments\u00a0 </p>"},{"location":"vscode/vscode/#live-share","title":"Live Share","text":"<p>Real-time collaborative development from the comfort of your favorite tools.</p> <p>Live Code Share\u00a0 </p>"},{"location":"vscode/vscode/#todo-tree","title":"Todo Tree","text":"<p>Show TODO, FIXME, etc. comment tags in a tree view</p> <p>Todo Tree\u00a0 </p>"},{"location":"vscode/vscode/#codesnap","title":"CodeSnap","text":"<p>\ud83d\udcf7 Take beautiful screenshots of your code CodeSnap\u00a0 </p>"},{"location":"vscode/vscode/#indenticator","title":"Indenticator","text":"<p>Highlights your current indent depth</p> <p>Todo Tree\u00a0 </p>"},{"location":"vscode/vscode/#python","title":"Python","text":""},{"location":"vscode/vscode/#python-extension","title":"Python Extension","text":"<p> Main extension for python development.</p> <p>Python Extension\u00a0\u00a0</p> Debug &amp; Test <p>See quickstart to setup debug and test environment  </p>"},{"location":"vscode/vscode/#python-docstring-generator","title":"Python Docstring Generator","text":"<p>Automatically generates detailed docstrings for python functions</p> <p>Python Docstring Generator\u00a0\u00a0</p>"},{"location":"vscode/vscode/#django-extension","title":"Django Extension","text":"<p>Beautiful syntax and scoped snippets for perfectionists with deadlines</p> <p>Django Extension\u00a0\u00a0</p> File association <p>Add this to your settings to enable template snippet for correct html files</p> <pre><code>\"files.associations\": {\n\"**/*.html\": \"html\",\n\"**/templates/**/*.html\": \"django-html\",\n\"**/templates/**/*\": \"django-txt\",\n\"**/requirements{/**,*}.{txt,in}\": \"pip-requirements\"\n}\n</code></pre>"},{"location":"vscode/vscode/#javascript","title":"Javascript","text":""},{"location":"vscode/vscode/#es6-code-snippets","title":"ES6 Code Snippets","text":"<p>Code snippets for JavaScript in ES6 syntax</p> <p>ES6 Code Snippets\u00a0\u00a0</p>"},{"location":"vscode/vscode/#es7-react-snippets","title":"ES7 React Snippets","text":"<p>Simple extensions for React, Redux and Graphql in JS/TS with ES7 syntax</p> <p>ESLint\u00a0\u00a0</p>"},{"location":"vscode/vscode/#es-lint","title":"ES Lint","text":"<p>Integrates ESLint JavaScript into VS Code.</p> <p>ESLint\u00a0\u00a0</p> Format On Save <p>Add this to your settings to enable format on save for eslint</p> <pre><code>\"editor.codeActionsOnSave\": {\n\"source.fixAll.eslint\": true\n}\n</code></pre>"},{"location":"vscode/vscode/#import-cost","title":"Import Cost","text":"<p>Display import/require package size in the editor</p> <p>ESLint\u00a0\u00a0</p>"},{"location":"vscode/vscode/#html-css","title":"HTML &amp; CSS","text":""},{"location":"vscode/vscode/#html-snippets","title":"HTML snippets","text":"<p>Full HTML tags including HTML5 Snippets</p> <p>HTML Snippets\u00a0\u00a0</p>"},{"location":"vscode/vscode/#auto-rename-tag","title":"Auto Rename Tag","text":"<p>Auto rename paired HTML/XML tag</p> <p>Auto Rename Tag\u00a0\u00a0</p>"},{"location":"vscode/vscode/#auto-close","title":"Auto Close","text":"<p>Automatically add HTML/XML close tag, same as Visual Studio IDE or Sublime Text</p> <p>Auto Close Tag\u00a0\u00a0</p>"},{"location":"vscode/vscode/#intellisense-for-css-class-names-in-html","title":"IntelliSense for CSS class names in HTML","text":"<p>CSS class name completion for the HTML class attribute based on the definitions found in your workspace. IntelliSense for CSS Class\u00a0\u00a0</p>"},{"location":"vscode/vscode/#css-peek","title":"CSS Peek","text":"<p>Allow peeking to css ID and class strings as definitions from html files to respective CSS. Allows peek and goto definition.</p> <p>CSS Peek\u00a0\u00a0</p>"},{"location":"vscode/vscode/#markdown","title":"Markdown","text":""},{"location":"vscode/vscode/#markdown-code-snippets","title":"Markdown Code Snippets","text":"<p>All you need to write Markdown (keyboard shortcuts, table of contents, auto preview and more)</p> <p>Markdown Snippets\u00a0\u00a0</p>"},{"location":"vscode/vscode/#markdown-linter","title":"Markdown Linter","text":"<p>Markdown linting and style checking for Visual Studio Code</p> <p>Markdown Linter\u00a0\u00a0</p> Format On Save <p>Add this to your settings to enable format on save for markdown</p> <pre><code>\"editor.codeActionsOnSave\": {\n\"source.fixAll.markdownlint\": true,\n}\n</code></pre>"},{"location":"vscode/vscode/#git","title":"Git","text":"<p>Supercharge the Git capabilities built into Visual Studio Code \u2014 Visualize code authorship at a glance via Git blame annotations and code lens, seamlessly navigate and explore Git repositories, gain valuable insights via powerful comparison commands, and so much more</p> <p>VS Marketplace Link: Git Lens\u00a0\u00a0</p>"}]}